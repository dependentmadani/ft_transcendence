// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  id          Int         @id @default(autoincrement())
  username    String      @unique
  email       String      @unique
  password    String?
  avatar      String?
  hashRt      String?
  twofa       String?
  twofaEmail  String?     @unique
  twoEnabled  Boolean     @default(false)
  userStatus  userStatus  @default(ONLINE)
  
  isActive              Boolean         @default(false)
  signedUp    Boolean     @default(false)

  
  // Notifications
  pendingFriendReq      Users[]         @relation("PendingFriend")
  pendingFriendReqOf    Users[]         @relation("PendingFriend")
  friends               Users[]         @relation("friends")
  friendOf              Users[]         @relation("friends")
  blocked               Users[]         @relation("blockedUsers")
  blockedBy             Users[]         @relation("blockedUsers")
  senNotification       Notifications[] @relation("senderNotification")
  recNotification       Notifications[] @relation("receiverNotification")

  // Chat
  chat        Chat[] @relation("chats")

  // Messages
  MessageSenId     Message[] @relation("Messagesencontact")
  // MessageRecId     Message[] @relation("Messagereccontact")
  
  // Rooms
  rooms       RoomUsers[]
  roomInvitationSender Invitations[] @relation("sender")
  roomInvitationReceiver Invitations[] @relation("receiver")


  // Game relation
  games                   Game?

  //Game History relation
  myHistoryGames          History[]       @relation("myHistory")
  oppHistoryGames         History[]       @relation("oppHistory")
}

model Game {
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  id                      Int             @id @default(autoincrement())
  user                    Users           @relation(fields: [userId], references: [id])
  userId                  Int             @unique
  gamesPlayed             Int             @default(0)
  wins                    Int             @default(0)
  loses                   Int             @default(0)
}

model History {
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  id                      Int             @id @default(autoincrement())
  myUser                  Users           @relation("myHistory", fields: [myUserId], references: [id])
  myUserId                Int
  oppUser                 Users           @relation("oppHistory", fields: [oppUserId], references: [id])
  oppUserId               Int
  myScore                 Int
  oppScore                Int
}

model Notifications {
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  id              Int         @id @default(autoincrement())
  // title           String
  // description     String?
  // icon            String?
  type            NotificationType
  read            Boolean     @default(false)
  // socketId        String
  senderUser      Users       @relation("senderNotification", fields: [senderId], references: [id])
  senderId        Int
  receiverUser    Users       @relation("receiverNotification", fields: [receiverId], references: [id])
  receiverId      Int
  mode            String?
}

model Chat {
  chatId   Int @id @default(autoincrement())
  users    Users[]  @relation("chats")
  chatUsers    Int[]
  msgChatId     Message[] @relation("listMessages")
  // latestMessage Message?  @relation(fields: [latestMsg], references: [messageId])
  // latestMsg     Int?

  latestMessageContent String?
  latestMessageDate DateTime?
}

model Message {
  messageId Int @id @default(autoincrement())
  textContent String
  createdAt   DateTime @default(now())
  senderId    Users @relation("Messagesencontact", fields: [MessageSenId], references: [id])
  MessageSenId       Int
  // receiverId  Users @relation("Messagereccontact", fields: [MessageRecId], references: [id])
  // MessageRecId       Int
  messageChatId  Chat? @relation("listMessages",fields: [msgChatId], references: [chatId])
  msgChatId       Int?
  messageRoomId  Room? @relation(fields: [msgRoomId], references: [id])
  msgRoomId       Int?
  type            String
  // latestMessage   Chat[]
}

model Room {
  id          Int @id @default(autoincrement())
  roomName    String
  roomAvatar  String
  roomUsers   RoomUsers[]
  invitations Invitations[] @relation("room")
  roomType  String
  roomPass  String?
  msgRoomId     Message[]

  latestMessageContent String?
  latestMessageDate DateTime?
}

model RoomUsers {
  id     Int @id @default(autoincrement())
  room   Room @relation(fields: [roomId], references: [id])
  roomId Int
  user   Users @relation(fields: [userId], references: [id])
  userId Int
  userUsername String
  role   String
  allowed Boolean
}

model Invitations {
  id  Int @id @default(autoincrement())
  status  String @default("Pending")
  sender  Users @relation("sender", fields: [senderId], references: [id])
  senderId  Int
  receiver  Users @relation("receiver", fields: [receiverId], references: [id])
  receiverId  Int
  room      Room @relation("room", fields: [roomId], references: [id])
  roomId  Int
}

enum Role {
  ADMIN
  USER
  KICKED
  MUTED
  BANNED
}

enum RelationStatus {
  MUTED_UNTIL_TOMMORROW
  BLOCKED
  NORMAL
}

enum userStatus {
  ONLINE
  OFFLINE
  INGAME
}

enum  NotificationType {
  INFO
  MESSAGE
  FRIEND
  GAME
}