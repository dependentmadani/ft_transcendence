
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  hashRt: 'hashRt',
  twofa: 'twofa',
  twofaEmail: 'twofaEmail',
  twoEnabled: 'twoEnabled',
  userStatus: 'userStatus',
  isActive: 'isActive',
  signedUp: 'signedUp'
};

exports.Prisma.GameScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  userId: 'userId',
  gamesPlayed: 'gamesPlayed',
  wins: 'wins',
  loses: 'loses',
  score: 'score'
};

exports.Prisma.HistoryScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  myUserId: 'myUserId',
  oppUserId: 'oppUserId',
  myScore: 'myScore',
  oppScore: 'oppScore'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id',
  type: 'type',
  read: 'read',
  senderId: 'senderId',
  receiverId: 'receiverId',
  mode: 'mode'
};

exports.Prisma.ChatScalarFieldEnum = {
  chatId: 'chatId',
  chatUsers: 'chatUsers',
  latestMessageContent: 'latestMessageContent',
  latestMessageDate: 'latestMessageDate'
};

exports.Prisma.MessageScalarFieldEnum = {
  messageId: 'messageId',
  textContent: 'textContent',
  createdAt: 'createdAt',
  MessageSenId: 'MessageSenId',
  msgChatId: 'msgChatId',
  msgRoomId: 'msgRoomId',
  type: 'type'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  roomName: 'roomName',
  roomAvatar: 'roomAvatar',
  roomType: 'roomType',
  roomPass: 'roomPass',
  latestMessageContent: 'latestMessageContent',
  latestMessageDate: 'latestMessageDate'
};

exports.Prisma.RoomUsersScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  userUsername: 'userUsername',
  role: 'role',
  allowed: 'allowed'
};

exports.Prisma.InvitationsScalarFieldEnum = {
  id: 'id',
  status: 'status',
  senderId: 'senderId',
  receiverId: 'receiverId',
  roomId: 'roomId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.userStatus = exports.$Enums.userStatus = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  INGAME: 'INGAME'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  MESSAGE: 'MESSAGE',
  FRIEND: 'FRIEND',
  GAME: 'GAME'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Game: 'Game',
  History: 'History',
  Notifications: 'Notifications',
  Chat: 'Chat',
  Message: 'Message',
  Room: 'Room',
  RoomUsers: 'RoomUsers',
  Invitations: 'Invitations'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
