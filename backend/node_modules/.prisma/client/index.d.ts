
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model History
 * 
 */
export type History = $Result.DefaultSelection<Prisma.$HistoryPayload>
/**
 * Model Notifications
 * 
 */
export type Notifications = $Result.DefaultSelection<Prisma.$NotificationsPayload>
/**
 * Model Chat
 * 
 */
export type Chat = $Result.DefaultSelection<Prisma.$ChatPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model RoomUsers
 * 
 */
export type RoomUsers = $Result.DefaultSelection<Prisma.$RoomUsersPayload>
/**
 * Model Invitations
 * 
 */
export type Invitations = $Result.DefaultSelection<Prisma.$InvitationsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const userStatus: {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  INGAME: 'INGAME'
};

export type userStatus = (typeof userStatus)[keyof typeof userStatus]


export const NotificationType: {
  INFO: 'INFO',
  MESSAGE: 'MESSAGE',
  FRIEND: 'FRIEND',
  GAME: 'GAME'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type userStatus = $Enums.userStatus

export const userStatus: typeof $Enums.userStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **Notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.NotificationsDelegate<ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs>;

  /**
   * `prisma.roomUsers`: Exposes CRUD operations for the **RoomUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomUsers
    * const roomUsers = await prisma.roomUsers.findMany()
    * ```
    */
  get roomUsers(): Prisma.RoomUsersDelegate<ExtArgs>;

  /**
   * `prisma.invitations`: Exposes CRUD operations for the **Invitations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitations.findMany()
    * ```
    */
  get invitations(): Prisma.InvitationsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Game: 'Game',
    History: 'History',
    Notifications: 'Notifications',
    Chat: 'Chat',
    Message: 'Message',
    Room: 'Room',
    RoomUsers: 'RoomUsers',
    Invitations: 'Invitations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'game' | 'history' | 'notifications' | 'chat' | 'message' | 'room' | 'roomUsers' | 'invitations'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>,
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      History: {
        payload: Prisma.$HistoryPayload<ExtArgs>
        fields: Prisma.HistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findFirst: {
            args: Prisma.HistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findMany: {
            args: Prisma.HistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          create: {
            args: Prisma.HistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          createMany: {
            args: Prisma.HistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          update: {
            args: Prisma.HistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          deleteMany: {
            args: Prisma.HistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.HistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
      Notifications: {
        payload: Prisma.$NotificationsPayload<ExtArgs>
        fields: Prisma.NotificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findFirst: {
            args: Prisma.NotificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findMany: {
            args: Prisma.NotificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>[]
          }
          create: {
            args: Prisma.NotificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          createMany: {
            args: Prisma.NotificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          update: {
            args: Prisma.NotificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.NotificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: Prisma.$ChatPayload<ExtArgs>
        fields: Prisma.ChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>,
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      RoomUsers: {
        payload: Prisma.$RoomUsersPayload<ExtArgs>
        fields: Prisma.RoomUsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomUsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomUsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          findFirst: {
            args: Prisma.RoomUsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomUsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          findMany: {
            args: Prisma.RoomUsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>[]
          }
          create: {
            args: Prisma.RoomUsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          createMany: {
            args: Prisma.RoomUsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoomUsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          update: {
            args: Prisma.RoomUsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          deleteMany: {
            args: Prisma.RoomUsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoomUsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoomUsersPayload>
          }
          aggregate: {
            args: Prisma.RoomUsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoomUsers>
          }
          groupBy: {
            args: Prisma.RoomUsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoomUsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomUsersCountArgs<ExtArgs>,
            result: $Utils.Optional<RoomUsersCountAggregateOutputType> | number
          }
        }
      }
      Invitations: {
        payload: Prisma.$InvitationsPayload<ExtArgs>
        fields: Prisma.InvitationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          findFirst: {
            args: Prisma.InvitationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          findMany: {
            args: Prisma.InvitationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>[]
          }
          create: {
            args: Prisma.InvitationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          createMany: {
            args: Prisma.InvitationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvitationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          update: {
            args: Prisma.InvitationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          deleteMany: {
            args: Prisma.InvitationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvitationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvitationsPayload>
          }
          aggregate: {
            args: Prisma.InvitationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvitations>
          }
          groupBy: {
            args: Prisma.InvitationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvitationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationsCountArgs<ExtArgs>,
            result: $Utils.Optional<InvitationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    pendingFriendReq: number
    pendingFriendReqOf: number
    friends: number
    friendOf: number
    blocked: number
    blockedBy: number
    senNotification: number
    recNotification: number
    chat: number
    MessageSenId: number
    rooms: number
    roomInvitationSender: number
    roomInvitationReceiver: number
    myHistoryGames: number
    oppHistoryGames: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pendingFriendReq?: boolean | UsersCountOutputTypeCountPendingFriendReqArgs
    pendingFriendReqOf?: boolean | UsersCountOutputTypeCountPendingFriendReqOfArgs
    friends?: boolean | UsersCountOutputTypeCountFriendsArgs
    friendOf?: boolean | UsersCountOutputTypeCountFriendOfArgs
    blocked?: boolean | UsersCountOutputTypeCountBlockedArgs
    blockedBy?: boolean | UsersCountOutputTypeCountBlockedByArgs
    senNotification?: boolean | UsersCountOutputTypeCountSenNotificationArgs
    recNotification?: boolean | UsersCountOutputTypeCountRecNotificationArgs
    chat?: boolean | UsersCountOutputTypeCountChatArgs
    MessageSenId?: boolean | UsersCountOutputTypeCountMessageSenIdArgs
    rooms?: boolean | UsersCountOutputTypeCountRoomsArgs
    roomInvitationSender?: boolean | UsersCountOutputTypeCountRoomInvitationSenderArgs
    roomInvitationReceiver?: boolean | UsersCountOutputTypeCountRoomInvitationReceiverArgs
    myHistoryGames?: boolean | UsersCountOutputTypeCountMyHistoryGamesArgs
    oppHistoryGames?: boolean | UsersCountOutputTypeCountOppHistoryGamesArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPendingFriendReqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPendingFriendReqOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFriendsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFriendOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBlockedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBlockedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSenNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRecNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMessageSenIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomUsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRoomInvitationSenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRoomInvitationReceiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMyHistoryGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOppHistoryGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }



  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    users: number
    msgChatId: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ChatCountOutputTypeCountUsersArgs
    msgChatId?: boolean | ChatCountOutputTypeCountMsgChatIdArgs
  }

  // Custom InputTypes

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMsgChatIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    roomUsers: number
    invitations: number
    msgRoomId: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomUsers?: boolean | RoomCountOutputTypeCountRoomUsersArgs
    invitations?: boolean | RoomCountOutputTypeCountInvitationsArgs
    msgRoomId?: boolean | RoomCountOutputTypeCountMsgRoomIdArgs
  }

  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountRoomUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomUsersWhereInput
  }


  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationsWhereInput
  }


  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountMsgRoomIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean | null
    userStatus: $Enums.userStatus | null
    isActive: boolean | null
    signedUp: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean | null
    userStatus: $Enums.userStatus | null
    isActive: boolean | null
    signedUp: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    username: number
    email: number
    password: number
    avatar: number
    hashRt: number
    twofa: number
    twofaEmail: number
    twoEnabled: number
    userStatus: number
    isActive: number
    signedUp: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    userStatus?: true
    isActive?: true
    signedUp?: true
  }

  export type UsersMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    userStatus?: true
    isActive?: true
    signedUp?: true
  }

  export type UsersCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    userStatus?: true
    isActive?: true
    signedUp?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    username: string
    email: string
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean
    userStatus: $Enums.userStatus
    isActive: boolean
    signedUp: boolean
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    hashRt?: boolean
    twofa?: boolean
    twofaEmail?: boolean
    twoEnabled?: boolean
    userStatus?: boolean
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: boolean | Users$pendingFriendReqArgs<ExtArgs>
    pendingFriendReqOf?: boolean | Users$pendingFriendReqOfArgs<ExtArgs>
    friends?: boolean | Users$friendsArgs<ExtArgs>
    friendOf?: boolean | Users$friendOfArgs<ExtArgs>
    blocked?: boolean | Users$blockedArgs<ExtArgs>
    blockedBy?: boolean | Users$blockedByArgs<ExtArgs>
    senNotification?: boolean | Users$senNotificationArgs<ExtArgs>
    recNotification?: boolean | Users$recNotificationArgs<ExtArgs>
    chat?: boolean | Users$chatArgs<ExtArgs>
    MessageSenId?: boolean | Users$MessageSenIdArgs<ExtArgs>
    rooms?: boolean | Users$roomsArgs<ExtArgs>
    roomInvitationSender?: boolean | Users$roomInvitationSenderArgs<ExtArgs>
    roomInvitationReceiver?: boolean | Users$roomInvitationReceiverArgs<ExtArgs>
    games?: boolean | Users$gamesArgs<ExtArgs>
    myHistoryGames?: boolean | Users$myHistoryGamesArgs<ExtArgs>
    oppHistoryGames?: boolean | Users$oppHistoryGamesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    hashRt?: boolean
    twofa?: boolean
    twofaEmail?: boolean
    twoEnabled?: boolean
    userStatus?: boolean
    isActive?: boolean
    signedUp?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pendingFriendReq?: boolean | Users$pendingFriendReqArgs<ExtArgs>
    pendingFriendReqOf?: boolean | Users$pendingFriendReqOfArgs<ExtArgs>
    friends?: boolean | Users$friendsArgs<ExtArgs>
    friendOf?: boolean | Users$friendOfArgs<ExtArgs>
    blocked?: boolean | Users$blockedArgs<ExtArgs>
    blockedBy?: boolean | Users$blockedByArgs<ExtArgs>
    senNotification?: boolean | Users$senNotificationArgs<ExtArgs>
    recNotification?: boolean | Users$recNotificationArgs<ExtArgs>
    chat?: boolean | Users$chatArgs<ExtArgs>
    MessageSenId?: boolean | Users$MessageSenIdArgs<ExtArgs>
    rooms?: boolean | Users$roomsArgs<ExtArgs>
    roomInvitationSender?: boolean | Users$roomInvitationSenderArgs<ExtArgs>
    roomInvitationReceiver?: boolean | Users$roomInvitationReceiverArgs<ExtArgs>
    games?: boolean | Users$gamesArgs<ExtArgs>
    myHistoryGames?: boolean | Users$myHistoryGamesArgs<ExtArgs>
    oppHistoryGames?: boolean | Users$oppHistoryGamesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      pendingFriendReq: Prisma.$UsersPayload<ExtArgs>[]
      pendingFriendReqOf: Prisma.$UsersPayload<ExtArgs>[]
      friends: Prisma.$UsersPayload<ExtArgs>[]
      friendOf: Prisma.$UsersPayload<ExtArgs>[]
      blocked: Prisma.$UsersPayload<ExtArgs>[]
      blockedBy: Prisma.$UsersPayload<ExtArgs>[]
      senNotification: Prisma.$NotificationsPayload<ExtArgs>[]
      recNotification: Prisma.$NotificationsPayload<ExtArgs>[]
      chat: Prisma.$ChatPayload<ExtArgs>[]
      MessageSenId: Prisma.$MessagePayload<ExtArgs>[]
      rooms: Prisma.$RoomUsersPayload<ExtArgs>[]
      roomInvitationSender: Prisma.$InvitationsPayload<ExtArgs>[]
      roomInvitationReceiver: Prisma.$InvitationsPayload<ExtArgs>[]
      games: Prisma.$GamePayload<ExtArgs> | null
      myHistoryGames: Prisma.$HistoryPayload<ExtArgs>[]
      oppHistoryGames: Prisma.$HistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      username: string
      email: string
      password: string | null
      avatar: string | null
      hashRt: string | null
      twofa: string | null
      twofaEmail: string | null
      twoEnabled: boolean
      userStatus: $Enums.userStatus
      isActive: boolean
      signedUp: boolean
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const usersWithCreatedAtOnly = await prisma.users.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pendingFriendReq<T extends Users$pendingFriendReqArgs<ExtArgs> = {}>(args?: Subset<T, Users$pendingFriendReqArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    pendingFriendReqOf<T extends Users$pendingFriendReqOfArgs<ExtArgs> = {}>(args?: Subset<T, Users$pendingFriendReqOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    friends<T extends Users$friendsArgs<ExtArgs> = {}>(args?: Subset<T, Users$friendsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    friendOf<T extends Users$friendOfArgs<ExtArgs> = {}>(args?: Subset<T, Users$friendOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    blocked<T extends Users$blockedArgs<ExtArgs> = {}>(args?: Subset<T, Users$blockedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    blockedBy<T extends Users$blockedByArgs<ExtArgs> = {}>(args?: Subset<T, Users$blockedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    senNotification<T extends Users$senNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Users$senNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    recNotification<T extends Users$recNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Users$recNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    chat<T extends Users$chatArgs<ExtArgs> = {}>(args?: Subset<T, Users$chatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findMany'> | Null>;

    MessageSenId<T extends Users$MessageSenIdArgs<ExtArgs> = {}>(args?: Subset<T, Users$MessageSenIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    rooms<T extends Users$roomsArgs<ExtArgs> = {}>(args?: Subset<T, Users$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    roomInvitationSender<T extends Users$roomInvitationSenderArgs<ExtArgs> = {}>(args?: Subset<T, Users$roomInvitationSenderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    roomInvitationReceiver<T extends Users$roomInvitationReceiverArgs<ExtArgs> = {}>(args?: Subset<T, Users$roomInvitationReceiverArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    games<T extends Users$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Users$gamesArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    myHistoryGames<T extends Users$myHistoryGamesArgs<ExtArgs> = {}>(args?: Subset<T, Users$myHistoryGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    oppHistoryGames<T extends Users$oppHistoryGamesArgs<ExtArgs> = {}>(args?: Subset<T, Users$oppHistoryGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly id: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly avatar: FieldRef<"Users", 'String'>
    readonly hashRt: FieldRef<"Users", 'String'>
    readonly twofa: FieldRef<"Users", 'String'>
    readonly twofaEmail: FieldRef<"Users", 'String'>
    readonly twoEnabled: FieldRef<"Users", 'Boolean'>
    readonly userStatus: FieldRef<"Users", 'userStatus'>
    readonly isActive: FieldRef<"Users", 'Boolean'>
    readonly signedUp: FieldRef<"Users", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.pendingFriendReq
   */
  export type Users$pendingFriendReqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.pendingFriendReqOf
   */
  export type Users$pendingFriendReqOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.friends
   */
  export type Users$friendsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.friendOf
   */
  export type Users$friendOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.blocked
   */
  export type Users$blockedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.blockedBy
   */
  export type Users$blockedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.senNotification
   */
  export type Users$senNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Users.recNotification
   */
  export type Users$recNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Users.chat
   */
  export type Users$chatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Users.MessageSenId
   */
  export type Users$MessageSenIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Users.rooms
   */
  export type Users$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    where?: RoomUsersWhereInput
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    cursor?: RoomUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomUsersScalarFieldEnum | RoomUsersScalarFieldEnum[]
  }


  /**
   * Users.roomInvitationSender
   */
  export type Users$roomInvitationSenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    where?: InvitationsWhereInput
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    cursor?: InvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Users.roomInvitationReceiver
   */
  export type Users$roomInvitationReceiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    where?: InvitationsWhereInput
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    cursor?: InvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Users.games
   */
  export type Users$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }


  /**
   * Users.myHistoryGames
   */
  export type Users$myHistoryGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * Users.oppHistoryGames
   */
  export type Users$oppHistoryGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    gamesPlayed: number | null
    wins: number | null
    loses: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    userId: number | null
    gamesPlayed: number | null
    wins: number | null
    loses: number | null
  }

  export type GameMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    userId: number | null
    gamesPlayed: number | null
    wins: number | null
    loses: number | null
  }

  export type GameMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    userId: number | null
    gamesPlayed: number | null
    wins: number | null
    loses: number | null
  }

  export type GameCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    userId: number
    gamesPlayed: number
    wins: number
    loses: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    userId?: true
    gamesPlayed?: true
    wins?: true
    loses?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    userId?: true
    gamesPlayed?: true
    wins?: true
    loses?: true
  }

  export type GameMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    gamesPlayed?: true
    wins?: true
    loses?: true
  }

  export type GameMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    gamesPlayed?: true
    wins?: true
    loses?: true
  }

  export type GameCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    gamesPlayed?: true
    wins?: true
    loses?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    userId: number
    gamesPlayed: number
    wins: number
    loses: number
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    userId?: boolean
    gamesPlayed?: boolean
    wins?: boolean
    loses?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    userId?: boolean
    gamesPlayed?: boolean
    wins?: boolean
    loses?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      userId: number
      gamesPlayed: number
      wins: number
      loses: number
    }, ExtArgs["result"]["game"]>
    composites: {}
  }


  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const gameWithCreatedAtOnly = await prisma.game.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GameCreateArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GameDeleteArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpdateArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpsertArgs<ExtArgs>>
    ): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Game model
   */ 
  interface GameFieldRefs {
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
    readonly id: FieldRef<"Game", 'Int'>
    readonly userId: FieldRef<"Game", 'Int'>
    readonly gamesPlayed: FieldRef<"Game", 'Int'>
    readonly wins: FieldRef<"Game", 'Int'>
    readonly loses: FieldRef<"Game", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }


  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }


  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
  }



  /**
   * Model History
   */

  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id: number | null
    myUserId: number | null
    oppUserId: number | null
    myScore: number | null
    oppScore: number | null
  }

  export type HistorySumAggregateOutputType = {
    id: number | null
    myUserId: number | null
    oppUserId: number | null
    myScore: number | null
    oppScore: number | null
  }

  export type HistoryMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    myUserId: number | null
    oppUserId: number | null
    myScore: number | null
    oppScore: number | null
  }

  export type HistoryMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    myUserId: number | null
    oppUserId: number | null
    myScore: number | null
    oppScore: number | null
  }

  export type HistoryCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    myUserId: number
    oppUserId: number
    myScore: number
    oppScore: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id?: true
    myUserId?: true
    oppUserId?: true
    myScore?: true
    oppScore?: true
  }

  export type HistorySumAggregateInputType = {
    id?: true
    myUserId?: true
    oppUserId?: true
    myScore?: true
    oppScore?: true
  }

  export type HistoryMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    myUserId?: true
    oppUserId?: true
    myScore?: true
    oppScore?: true
  }

  export type HistoryMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    myUserId?: true
    oppUserId?: true
    myScore?: true
    oppScore?: true
  }

  export type HistoryCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    myUserId?: true
    oppUserId?: true
    myScore?: true
    oppScore?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithAggregationInput | HistoryOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }

  export type HistoryGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    myUserId: number
    oppUserId: number
    myScore: number
    oppScore: number
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    myUserId?: boolean
    oppUserId?: boolean
    myScore?: boolean
    oppScore?: boolean
    myUser?: boolean | UsersDefaultArgs<ExtArgs>
    oppUser?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    myUserId?: boolean
    oppUserId?: boolean
    myScore?: boolean
    oppScore?: boolean
  }

  export type HistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    myUser?: boolean | UsersDefaultArgs<ExtArgs>
    oppUser?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $HistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History"
    objects: {
      myUser: Prisma.$UsersPayload<ExtArgs>
      oppUser: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      myUserId: number
      oppUserId: number
      myScore: number
      oppScore: number
    }, ExtArgs["result"]["history"]>
    composites: {}
  }


  type HistoryGetPayload<S extends boolean | null | undefined | HistoryDefaultArgs> = $Result.GetResult<Prisma.$HistoryPayload, S>

  type HistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History'], meta: { name: 'History' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one History that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const historyWithCreatedAtOnly = await prisma.history.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends HistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends HistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryCreateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Histories.
     *     @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends HistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryDeleteArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends HistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpsertArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History model
   */
  readonly fields: HistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    myUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    oppUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the History model
   */ 
  interface HistoryFieldRefs {
    readonly createdAt: FieldRef<"History", 'DateTime'>
    readonly updatedAt: FieldRef<"History", 'DateTime'>
    readonly id: FieldRef<"History", 'Int'>
    readonly myUserId: FieldRef<"History", 'Int'>
    readonly oppUserId: FieldRef<"History", 'Int'>
    readonly myScore: FieldRef<"History", 'Int'>
    readonly oppScore: FieldRef<"History", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * History findUnique
   */
  export type HistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findFirst
   */
  export type HistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findMany
   */
  export type HistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History create
   */
  export type HistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }


  /**
   * History createMany
   */
  export type HistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * History update
   */
  export type HistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
  }


  /**
   * History upsert
   */
  export type HistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }


  /**
   * History delete
   */
  export type HistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
  }


  /**
   * History without action
   */
  export type HistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
  }



  /**
   * Model Notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    type: $Enums.NotificationType | null
    read: boolean | null
    senderId: number | null
    receiverId: number | null
    mode: string | null
  }

  export type NotificationsMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    type: $Enums.NotificationType | null
    read: boolean | null
    senderId: number | null
    receiverId: number | null
    mode: string | null
  }

  export type NotificationsCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    type: number
    read: number
    senderId: number
    receiverId: number
    mode: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    type?: true
    read?: true
    senderId?: true
    receiverId?: true
    mode?: true
  }

  export type NotificationsMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    type?: true
    read?: true
    senderId?: true
    receiverId?: true
    mode?: true
  }

  export type NotificationsCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    type?: true
    read?: true
    senderId?: true
    receiverId?: true
    mode?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to aggregate.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithAggregationInput | NotificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: NotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    type: $Enums.NotificationType
    read: boolean
    senderId: number
    receiverId: number
    mode: string | null
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    type?: boolean
    read?: boolean
    senderId?: boolean
    receiverId?: boolean
    mode?: boolean
    senderUser?: boolean | UsersDefaultArgs<ExtArgs>
    receiverUser?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type NotificationsSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    type?: boolean
    read?: boolean
    senderId?: boolean
    receiverId?: boolean
    mode?: boolean
  }

  export type NotificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    senderUser?: boolean | UsersDefaultArgs<ExtArgs>
    receiverUser?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $NotificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notifications"
    objects: {
      senderUser: Prisma.$UsersPayload<ExtArgs>
      receiverUser: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      type: $Enums.NotificationType
      read: boolean
      senderId: number
      receiverId: number
      mode: string | null
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }


  type NotificationsGetPayload<S extends boolean | null | undefined | NotificationsDefaultArgs> = $Result.GetResult<Prisma.$NotificationsPayload, S>

  type NotificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface NotificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notifications'], meta: { name: 'Notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {NotificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const notificationsWithCreatedAtOnly = await prisma.notifications.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends NotificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notifications.
     * @param {NotificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends NotificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsCreateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {NotificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends NotificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsDeleteArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {NotificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {NotificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpsertArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationsCountArgs>(
      args?: Subset<T, NotificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notifications model
   */
  readonly fields: NotificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    senderUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receiverUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notifications model
   */ 
  interface NotificationsFieldRefs {
    readonly createdAt: FieldRef<"Notifications", 'DateTime'>
    readonly updatedAt: FieldRef<"Notifications", 'DateTime'>
    readonly id: FieldRef<"Notifications", 'Int'>
    readonly type: FieldRef<"Notifications", 'NotificationType'>
    readonly read: FieldRef<"Notifications", 'Boolean'>
    readonly senderId: FieldRef<"Notifications", 'Int'>
    readonly receiverId: FieldRef<"Notifications", 'Int'>
    readonly mode: FieldRef<"Notifications", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Notifications findUnique
   */
  export type NotificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findUniqueOrThrow
   */
  export type NotificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findFirst
   */
  export type NotificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findFirstOrThrow
   */
  export type NotificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findMany
   */
  export type NotificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications create
   */
  export type NotificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Notifications.
     */
    data: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
  }


  /**
   * Notifications createMany
   */
  export type NotificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationsCreateManyInput | NotificationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notifications update
   */
  export type NotificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Notifications.
     */
    data: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
    /**
     * Choose, which Notifications to update.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications updateMany
   */
  export type NotificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications upsert
   */
  export type NotificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Notifications to update in case it exists.
     */
    where: NotificationsWhereUniqueInput
    /**
     * In case the Notifications found by the `where` argument doesn't exist, create a new Notifications with this data.
     */
    create: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
    /**
     * In case the Notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
  }


  /**
   * Notifications delete
   */
  export type NotificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter which Notifications to delete.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications deleteMany
   */
  export type NotificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications without action
   */
  export type NotificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
  }



  /**
   * Model Chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    chatId: number | null
    chatUsers: number | null
  }

  export type ChatSumAggregateOutputType = {
    chatId: number | null
    chatUsers: number[]
  }

  export type ChatMinAggregateOutputType = {
    chatId: number | null
  }

  export type ChatMaxAggregateOutputType = {
    chatId: number | null
  }

  export type ChatCountAggregateOutputType = {
    chatId: number
    chatUsers: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    chatId?: true
    chatUsers?: true
  }

  export type ChatSumAggregateInputType = {
    chatId?: true
    chatUsers?: true
  }

  export type ChatMinAggregateInputType = {
    chatId?: true
  }

  export type ChatMaxAggregateInputType = {
    chatId?: true
  }

  export type ChatCountAggregateInputType = {
    chatId?: true
    chatUsers?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithAggregationInput | ChatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    chatId: number
    chatUsers: number[]
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chatId?: boolean
    chatUsers?: boolean
    users?: boolean | Chat$usersArgs<ExtArgs>
    msgChatId?: boolean | Chat$msgChatIdArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    chatId?: boolean
    chatUsers?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Chat$usersArgs<ExtArgs>
    msgChatId?: boolean | Chat$msgChatIdArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chat"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>[]
      msgChatId: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      chatId: number
      chatUsers: number[]
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }


  type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = $Result.GetResult<Prisma.$ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `chatId`
     * const chatWithChatIdOnly = await prisma.chat.findMany({ select: { chatId: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatCreateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Chat$usersArgs<ExtArgs> = {}>(args?: Subset<T, Chat$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    msgChatId<T extends Chat$msgChatIdArgs<ExtArgs> = {}>(args?: Subset<T, Chat$msgChatIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Chat model
   */ 
  interface ChatFieldRefs {
    readonly chatId: FieldRef<"Chat", 'Int'>
    readonly chatUsers: FieldRef<"Chat", 'Int[]'>
  }
    

  // Custom InputTypes

  /**
   * Chat findUnique
   */
  export type ChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat findFirst
   */
  export type ChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data?: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat.users
   */
  export type Chat$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Chat.msgChatId
   */
  export type Chat$msgChatIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Chat without action
   */
  export type ChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    messageId: number | null
    MessageSenId: number | null
    msgChatId: number | null
    msgRoomId: number | null
  }

  export type MessageSumAggregateOutputType = {
    messageId: number | null
    MessageSenId: number | null
    msgChatId: number | null
    msgRoomId: number | null
  }

  export type MessageMinAggregateOutputType = {
    messageId: number | null
    textContent: string | null
    createdAt: Date | null
    MessageSenId: number | null
    msgChatId: number | null
    msgRoomId: number | null
    type: string | null
  }

  export type MessageMaxAggregateOutputType = {
    messageId: number | null
    textContent: string | null
    createdAt: Date | null
    MessageSenId: number | null
    msgChatId: number | null
    msgRoomId: number | null
    type: string | null
  }

  export type MessageCountAggregateOutputType = {
    messageId: number
    textContent: number
    createdAt: number
    MessageSenId: number
    msgChatId: number
    msgRoomId: number
    type: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    messageId?: true
    MessageSenId?: true
    msgChatId?: true
    msgRoomId?: true
  }

  export type MessageSumAggregateInputType = {
    messageId?: true
    MessageSenId?: true
    msgChatId?: true
    msgRoomId?: true
  }

  export type MessageMinAggregateInputType = {
    messageId?: true
    textContent?: true
    createdAt?: true
    MessageSenId?: true
    msgChatId?: true
    msgRoomId?: true
    type?: true
  }

  export type MessageMaxAggregateInputType = {
    messageId?: true
    textContent?: true
    createdAt?: true
    MessageSenId?: true
    msgChatId?: true
    msgRoomId?: true
    type?: true
  }

  export type MessageCountAggregateInputType = {
    messageId?: true
    textContent?: true
    createdAt?: true
    MessageSenId?: true
    msgChatId?: true
    msgRoomId?: true
    type?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    messageId: number
    textContent: string
    createdAt: Date
    MessageSenId: number
    msgChatId: number | null
    msgRoomId: number | null
    type: string
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    textContent?: boolean
    createdAt?: boolean
    MessageSenId?: boolean
    msgChatId?: boolean
    msgRoomId?: boolean
    type?: boolean
    senderId?: boolean | UsersDefaultArgs<ExtArgs>
    messageChatId?: boolean | Message$messageChatIdArgs<ExtArgs>
    messageRoomId?: boolean | Message$messageRoomIdArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    messageId?: boolean
    textContent?: boolean
    createdAt?: boolean
    MessageSenId?: boolean
    msgChatId?: boolean
    msgRoomId?: boolean
    type?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    senderId?: boolean | UsersDefaultArgs<ExtArgs>
    messageChatId?: boolean | Message$messageChatIdArgs<ExtArgs>
    messageRoomId?: boolean | Message$messageRoomIdArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      senderId: Prisma.$UsersPayload<ExtArgs>
      messageChatId: Prisma.$ChatPayload<ExtArgs> | null
      messageRoomId: Prisma.$RoomPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      messageId: number
      textContent: string
      createdAt: Date
      MessageSenId: number
      msgChatId: number | null
      msgRoomId: number | null
      type: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `messageId`
     * const messageWithMessageIdOnly = await prisma.message.findMany({ select: { messageId: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    senderId<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    messageChatId<T extends Message$messageChatIdArgs<ExtArgs> = {}>(args?: Subset<T, Message$messageChatIdArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    messageRoomId<T extends Message$messageRoomIdArgs<ExtArgs> = {}>(args?: Subset<T, Message$messageRoomIdArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly messageId: FieldRef<"Message", 'Int'>
    readonly textContent: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly MessageSenId: FieldRef<"Message", 'Int'>
    readonly msgChatId: FieldRef<"Message", 'Int'>
    readonly msgRoomId: FieldRef<"Message", 'Int'>
    readonly type: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message.messageChatId
   */
  export type Message$messageChatIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
  }


  /**
   * Message.messageRoomId
   */
  export type Message$messageRoomIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }


  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    roomName: string | null
    roomAvatar: string | null
    roomType: string | null
    roomPass: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    roomName: string | null
    roomAvatar: string | null
    roomType: string | null
    roomPass: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    roomName: number
    roomAvatar: number
    roomType: number
    roomPass: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    roomName?: true
    roomAvatar?: true
    roomType?: true
    roomPass?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    roomName?: true
    roomAvatar?: true
    roomType?: true
    roomPass?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    roomName?: true
    roomAvatar?: true
    roomType?: true
    roomPass?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass: string | null
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomName?: boolean
    roomAvatar?: boolean
    roomType?: boolean
    roomPass?: boolean
    roomUsers?: boolean | Room$roomUsersArgs<ExtArgs>
    invitations?: boolean | Room$invitationsArgs<ExtArgs>
    msgRoomId?: boolean | Room$msgRoomIdArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    roomName?: boolean
    roomAvatar?: boolean
    roomType?: boolean
    roomPass?: boolean
  }

  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomUsers?: boolean | Room$roomUsersArgs<ExtArgs>
    invitations?: boolean | Room$invitationsArgs<ExtArgs>
    msgRoomId?: boolean | Room$msgRoomIdArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      roomUsers: Prisma.$RoomUsersPayload<ExtArgs>[]
      invitations: Prisma.$InvitationsPayload<ExtArgs>[]
      msgRoomId: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomName: string
      roomAvatar: string
      roomType: string
      roomPass: string | null
    }, ExtArgs["result"]["room"]>
    composites: {}
  }


  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Room that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomCreateArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>
    ): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    roomUsers<T extends Room$roomUsersArgs<ExtArgs> = {}>(args?: Subset<T, Room$roomUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    invitations<T extends Room$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Room$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    msgRoomId<T extends Room$msgRoomIdArgs<ExtArgs> = {}>(args?: Subset<T, Room$msgRoomIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Room model
   */ 
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'Int'>
    readonly roomName: FieldRef<"Room", 'String'>
    readonly roomAvatar: FieldRef<"Room", 'String'>
    readonly roomType: FieldRef<"Room", 'String'>
    readonly roomPass: FieldRef<"Room", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }


  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
  }


  /**
   * Room.roomUsers
   */
  export type Room$roomUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    where?: RoomUsersWhereInput
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    cursor?: RoomUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomUsersScalarFieldEnum | RoomUsersScalarFieldEnum[]
  }


  /**
   * Room.invitations
   */
  export type Room$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    where?: InvitationsWhereInput
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    cursor?: InvitationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Room.msgRoomId
   */
  export type Room$msgRoomIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude<ExtArgs> | null
  }



  /**
   * Model RoomUsers
   */

  export type AggregateRoomUsers = {
    _count: RoomUsersCountAggregateOutputType | null
    _avg: RoomUsersAvgAggregateOutputType | null
    _sum: RoomUsersSumAggregateOutputType | null
    _min: RoomUsersMinAggregateOutputType | null
    _max: RoomUsersMaxAggregateOutputType | null
  }

  export type RoomUsersAvgAggregateOutputType = {
    id: number | null
    roomId: number | null
    userId: number | null
  }

  export type RoomUsersSumAggregateOutputType = {
    id: number | null
    roomId: number | null
    userId: number | null
  }

  export type RoomUsersMinAggregateOutputType = {
    id: number | null
    roomId: number | null
    userId: number | null
    role: string | null
    allowed: boolean | null
  }

  export type RoomUsersMaxAggregateOutputType = {
    id: number | null
    roomId: number | null
    userId: number | null
    role: string | null
    allowed: boolean | null
  }

  export type RoomUsersCountAggregateOutputType = {
    id: number
    roomId: number
    userId: number
    role: number
    allowed: number
    _all: number
  }


  export type RoomUsersAvgAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
  }

  export type RoomUsersSumAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
  }

  export type RoomUsersMinAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    role?: true
    allowed?: true
  }

  export type RoomUsersMaxAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    role?: true
    allowed?: true
  }

  export type RoomUsersCountAggregateInputType = {
    id?: true
    roomId?: true
    userId?: true
    role?: true
    allowed?: true
    _all?: true
  }

  export type RoomUsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomUsers to aggregate.
     */
    where?: RoomUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomUsers to fetch.
     */
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomUsers
    **/
    _count?: true | RoomUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomUsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomUsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomUsersMaxAggregateInputType
  }

  export type GetRoomUsersAggregateType<T extends RoomUsersAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomUsers[P]>
      : GetScalarType<T[P], AggregateRoomUsers[P]>
  }




  export type RoomUsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomUsersWhereInput
    orderBy?: RoomUsersOrderByWithAggregationInput | RoomUsersOrderByWithAggregationInput[]
    by: RoomUsersScalarFieldEnum[] | RoomUsersScalarFieldEnum
    having?: RoomUsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomUsersCountAggregateInputType | true
    _avg?: RoomUsersAvgAggregateInputType
    _sum?: RoomUsersSumAggregateInputType
    _min?: RoomUsersMinAggregateInputType
    _max?: RoomUsersMaxAggregateInputType
  }

  export type RoomUsersGroupByOutputType = {
    id: number
    roomId: number
    userId: number
    role: string
    allowed: boolean
    _count: RoomUsersCountAggregateOutputType | null
    _avg: RoomUsersAvgAggregateOutputType | null
    _sum: RoomUsersSumAggregateOutputType | null
    _min: RoomUsersMinAggregateOutputType | null
    _max: RoomUsersMaxAggregateOutputType | null
  }

  type GetRoomUsersGroupByPayload<T extends RoomUsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomUsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomUsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomUsersGroupByOutputType[P]>
            : GetScalarType<T[P], RoomUsersGroupByOutputType[P]>
        }
      >
    >


  export type RoomUsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    userId?: boolean
    role?: boolean
    allowed?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomUsers"]>

  export type RoomUsersSelectScalar = {
    id?: boolean
    roomId?: boolean
    userId?: boolean
    role?: boolean
    allowed?: boolean
  }

  export type RoomUsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $RoomUsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomUsers"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomId: number
      userId: number
      role: string
      allowed: boolean
    }, ExtArgs["result"]["roomUsers"]>
    composites: {}
  }


  type RoomUsersGetPayload<S extends boolean | null | undefined | RoomUsersDefaultArgs> = $Result.GetResult<Prisma.$RoomUsersPayload, S>

  type RoomUsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoomUsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RoomUsersCountAggregateInputType | true
    }

  export interface RoomUsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomUsers'], meta: { name: 'RoomUsers' } }
    /**
     * Find zero or one RoomUsers that matches the filter.
     * @param {RoomUsersFindUniqueArgs} args - Arguments to find a RoomUsers
     * @example
     * // Get one RoomUsers
     * const roomUsers = await prisma.roomUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomUsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersFindUniqueArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RoomUsers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomUsersFindUniqueOrThrowArgs} args - Arguments to find a RoomUsers
     * @example
     * // Get one RoomUsers
     * const roomUsers = await prisma.roomUsers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomUsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RoomUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersFindFirstArgs} args - Arguments to find a RoomUsers
     * @example
     * // Get one RoomUsers
     * const roomUsers = await prisma.roomUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomUsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersFindFirstArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RoomUsers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersFindFirstOrThrowArgs} args - Arguments to find a RoomUsers
     * @example
     * // Get one RoomUsers
     * const roomUsers = await prisma.roomUsers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomUsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RoomUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomUsers
     * const roomUsers = await prisma.roomUsers.findMany()
     * 
     * // Get first 10 RoomUsers
     * const roomUsers = await prisma.roomUsers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomUsersWithIdOnly = await prisma.roomUsers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomUsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RoomUsers.
     * @param {RoomUsersCreateArgs} args - Arguments to create a RoomUsers.
     * @example
     * // Create one RoomUsers
     * const RoomUsers = await prisma.roomUsers.create({
     *   data: {
     *     // ... data to create a RoomUsers
     *   }
     * })
     * 
    **/
    create<T extends RoomUsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersCreateArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RoomUsers.
     *     @param {RoomUsersCreateManyArgs} args - Arguments to create many RoomUsers.
     *     @example
     *     // Create many RoomUsers
     *     const roomUsers = await prisma.roomUsers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomUsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoomUsers.
     * @param {RoomUsersDeleteArgs} args - Arguments to delete one RoomUsers.
     * @example
     * // Delete one RoomUsers
     * const RoomUsers = await prisma.roomUsers.delete({
     *   where: {
     *     // ... filter to delete one RoomUsers
     *   }
     * })
     * 
    **/
    delete<T extends RoomUsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersDeleteArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RoomUsers.
     * @param {RoomUsersUpdateArgs} args - Arguments to update one RoomUsers.
     * @example
     * // Update one RoomUsers
     * const roomUsers = await prisma.roomUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersUpdateArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RoomUsers.
     * @param {RoomUsersDeleteManyArgs} args - Arguments to filter RoomUsers to delete.
     * @example
     * // Delete a few RoomUsers
     * const { count } = await prisma.roomUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomUsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoomUsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomUsers
     * const roomUsers = await prisma.roomUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoomUsers.
     * @param {RoomUsersUpsertArgs} args - Arguments to update or create a RoomUsers.
     * @example
     * // Update or create a RoomUsers
     * const roomUsers = await prisma.roomUsers.upsert({
     *   create: {
     *     // ... data to create a RoomUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomUsers we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoomUsersUpsertArgs<ExtArgs>>
    ): Prisma__RoomUsersClient<$Result.GetResult<Prisma.$RoomUsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RoomUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersCountArgs} args - Arguments to filter RoomUsers to count.
     * @example
     * // Count the number of RoomUsers
     * const count = await prisma.roomUsers.count({
     *   where: {
     *     // ... the filter for the RoomUsers we want to count
     *   }
     * })
    **/
    count<T extends RoomUsersCountArgs>(
      args?: Subset<T, RoomUsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomUsersAggregateArgs>(args: Subset<T, RoomUsersAggregateArgs>): Prisma.PrismaPromise<GetRoomUsersAggregateType<T>>

    /**
     * Group by RoomUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomUsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomUsersGroupByArgs['orderBy'] }
        : { orderBy?: RoomUsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomUsers model
   */
  readonly fields: RoomUsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomUsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RoomUsers model
   */ 
  interface RoomUsersFieldRefs {
    readonly id: FieldRef<"RoomUsers", 'Int'>
    readonly roomId: FieldRef<"RoomUsers", 'Int'>
    readonly userId: FieldRef<"RoomUsers", 'Int'>
    readonly role: FieldRef<"RoomUsers", 'String'>
    readonly allowed: FieldRef<"RoomUsers", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * RoomUsers findUnique
   */
  export type RoomUsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter, which RoomUsers to fetch.
     */
    where: RoomUsersWhereUniqueInput
  }


  /**
   * RoomUsers findUniqueOrThrow
   */
  export type RoomUsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter, which RoomUsers to fetch.
     */
    where: RoomUsersWhereUniqueInput
  }


  /**
   * RoomUsers findFirst
   */
  export type RoomUsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter, which RoomUsers to fetch.
     */
    where?: RoomUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomUsers to fetch.
     */
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomUsers.
     */
    cursor?: RoomUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomUsers.
     */
    distinct?: RoomUsersScalarFieldEnum | RoomUsersScalarFieldEnum[]
  }


  /**
   * RoomUsers findFirstOrThrow
   */
  export type RoomUsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter, which RoomUsers to fetch.
     */
    where?: RoomUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomUsers to fetch.
     */
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomUsers.
     */
    cursor?: RoomUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomUsers.
     */
    distinct?: RoomUsersScalarFieldEnum | RoomUsersScalarFieldEnum[]
  }


  /**
   * RoomUsers findMany
   */
  export type RoomUsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter, which RoomUsers to fetch.
     */
    where?: RoomUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomUsers to fetch.
     */
    orderBy?: RoomUsersOrderByWithRelationInput | RoomUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomUsers.
     */
    cursor?: RoomUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomUsers.
     */
    skip?: number
    distinct?: RoomUsersScalarFieldEnum | RoomUsersScalarFieldEnum[]
  }


  /**
   * RoomUsers create
   */
  export type RoomUsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomUsers.
     */
    data: XOR<RoomUsersCreateInput, RoomUsersUncheckedCreateInput>
  }


  /**
   * RoomUsers createMany
   */
  export type RoomUsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomUsers.
     */
    data: RoomUsersCreateManyInput | RoomUsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RoomUsers update
   */
  export type RoomUsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomUsers.
     */
    data: XOR<RoomUsersUpdateInput, RoomUsersUncheckedUpdateInput>
    /**
     * Choose, which RoomUsers to update.
     */
    where: RoomUsersWhereUniqueInput
  }


  /**
   * RoomUsers updateMany
   */
  export type RoomUsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomUsers.
     */
    data: XOR<RoomUsersUpdateManyMutationInput, RoomUsersUncheckedUpdateManyInput>
    /**
     * Filter which RoomUsers to update
     */
    where?: RoomUsersWhereInput
  }


  /**
   * RoomUsers upsert
   */
  export type RoomUsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomUsers to update in case it exists.
     */
    where: RoomUsersWhereUniqueInput
    /**
     * In case the RoomUsers found by the `where` argument doesn't exist, create a new RoomUsers with this data.
     */
    create: XOR<RoomUsersCreateInput, RoomUsersUncheckedCreateInput>
    /**
     * In case the RoomUsers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUsersUpdateInput, RoomUsersUncheckedUpdateInput>
  }


  /**
   * RoomUsers delete
   */
  export type RoomUsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
    /**
     * Filter which RoomUsers to delete.
     */
    where: RoomUsersWhereUniqueInput
  }


  /**
   * RoomUsers deleteMany
   */
  export type RoomUsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomUsers to delete
     */
    where?: RoomUsersWhereInput
  }


  /**
   * RoomUsers without action
   */
  export type RoomUsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomUsers
     */
    select?: RoomUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomUsersInclude<ExtArgs> | null
  }



  /**
   * Model Invitations
   */

  export type AggregateInvitations = {
    _count: InvitationsCountAggregateOutputType | null
    _avg: InvitationsAvgAggregateOutputType | null
    _sum: InvitationsSumAggregateOutputType | null
    _min: InvitationsMinAggregateOutputType | null
    _max: InvitationsMaxAggregateOutputType | null
  }

  export type InvitationsAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
    roomId: number | null
  }

  export type InvitationsSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
    roomId: number | null
  }

  export type InvitationsMinAggregateOutputType = {
    id: number | null
    status: string | null
    senderId: number | null
    receiverId: number | null
    roomId: number | null
  }

  export type InvitationsMaxAggregateOutputType = {
    id: number | null
    status: string | null
    senderId: number | null
    receiverId: number | null
    roomId: number | null
  }

  export type InvitationsCountAggregateOutputType = {
    id: number
    status: number
    senderId: number
    receiverId: number
    roomId: number
    _all: number
  }


  export type InvitationsAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    roomId?: true
  }

  export type InvitationsSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    roomId?: true
  }

  export type InvitationsMinAggregateInputType = {
    id?: true
    status?: true
    senderId?: true
    receiverId?: true
    roomId?: true
  }

  export type InvitationsMaxAggregateInputType = {
    id?: true
    status?: true
    senderId?: true
    receiverId?: true
    roomId?: true
  }

  export type InvitationsCountAggregateInputType = {
    id?: true
    status?: true
    senderId?: true
    receiverId?: true
    roomId?: true
    _all?: true
  }

  export type InvitationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to aggregate.
     */
    where?: InvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvitationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvitationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationsMaxAggregateInputType
  }

  export type GetInvitationsAggregateType<T extends InvitationsAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitations[P]>
      : GetScalarType<T[P], AggregateInvitations[P]>
  }




  export type InvitationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationsWhereInput
    orderBy?: InvitationsOrderByWithAggregationInput | InvitationsOrderByWithAggregationInput[]
    by: InvitationsScalarFieldEnum[] | InvitationsScalarFieldEnum
    having?: InvitationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationsCountAggregateInputType | true
    _avg?: InvitationsAvgAggregateInputType
    _sum?: InvitationsSumAggregateInputType
    _min?: InvitationsMinAggregateInputType
    _max?: InvitationsMaxAggregateInputType
  }

  export type InvitationsGroupByOutputType = {
    id: number
    status: string
    senderId: number
    receiverId: number
    roomId: number
    _count: InvitationsCountAggregateOutputType | null
    _avg: InvitationsAvgAggregateOutputType | null
    _sum: InvitationsSumAggregateOutputType | null
    _min: InvitationsMinAggregateOutputType | null
    _max: InvitationsMaxAggregateOutputType | null
  }

  type GetInvitationsGroupByPayload<T extends InvitationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationsGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationsGroupByOutputType[P]>
        }
      >
    >


  export type InvitationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    senderId?: boolean
    receiverId?: boolean
    roomId?: boolean
    sender?: boolean | UsersDefaultArgs<ExtArgs>
    receiver?: boolean | UsersDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitations"]>

  export type InvitationsSelectScalar = {
    id?: boolean
    status?: boolean
    senderId?: boolean
    receiverId?: boolean
    roomId?: boolean
  }

  export type InvitationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UsersDefaultArgs<ExtArgs>
    receiver?: boolean | UsersDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }


  export type $InvitationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitations"
    objects: {
      sender: Prisma.$UsersPayload<ExtArgs>
      receiver: Prisma.$UsersPayload<ExtArgs>
      room: Prisma.$RoomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string
      senderId: number
      receiverId: number
      roomId: number
    }, ExtArgs["result"]["invitations"]>
    composites: {}
  }


  type InvitationsGetPayload<S extends boolean | null | undefined | InvitationsDefaultArgs> = $Result.GetResult<Prisma.$InvitationsPayload, S>

  type InvitationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvitationsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: InvitationsCountAggregateInputType | true
    }

  export interface InvitationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitations'], meta: { name: 'Invitations' } }
    /**
     * Find zero or one Invitations that matches the filter.
     * @param {InvitationsFindUniqueArgs} args - Arguments to find a Invitations
     * @example
     * // Get one Invitations
     * const invitations = await prisma.invitations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvitationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsFindUniqueArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Invitations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvitationsFindUniqueOrThrowArgs} args - Arguments to find a Invitations
     * @example
     * // Get one Invitations
     * const invitations = await prisma.invitations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvitationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsFindFirstArgs} args - Arguments to find a Invitations
     * @example
     * // Get one Invitations
     * const invitations = await prisma.invitations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvitationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsFindFirstArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Invitations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsFindFirstOrThrowArgs} args - Arguments to find a Invitations
     * @example
     * // Get one Invitations
     * const invitations = await prisma.invitations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvitationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitations.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationsWithIdOnly = await prisma.invitations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvitationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Invitations.
     * @param {InvitationsCreateArgs} args - Arguments to create a Invitations.
     * @example
     * // Create one Invitations
     * const Invitations = await prisma.invitations.create({
     *   data: {
     *     // ... data to create a Invitations
     *   }
     * })
     * 
    **/
    create<T extends InvitationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsCreateArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Invitations.
     *     @param {InvitationsCreateManyArgs} args - Arguments to create many Invitations.
     *     @example
     *     // Create many Invitations
     *     const invitations = await prisma.invitations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvitationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Invitations.
     * @param {InvitationsDeleteArgs} args - Arguments to delete one Invitations.
     * @example
     * // Delete one Invitations
     * const Invitations = await prisma.invitations.delete({
     *   where: {
     *     // ... filter to delete one Invitations
     *   }
     * })
     * 
    **/
    delete<T extends InvitationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsDeleteArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Invitations.
     * @param {InvitationsUpdateArgs} args - Arguments to update one Invitations.
     * @example
     * // Update one Invitations
     * const invitations = await prisma.invitations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvitationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsUpdateArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationsDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvitationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvitationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitations = await prisma.invitations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvitationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invitations.
     * @param {InvitationsUpsertArgs} args - Arguments to update or create a Invitations.
     * @example
     * // Update or create a Invitations
     * const invitations = await prisma.invitations.upsert({
     *   create: {
     *     // ... data to create a Invitations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitations we want to update
     *   }
     * })
    **/
    upsert<T extends InvitationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvitationsUpsertArgs<ExtArgs>>
    ): Prisma__InvitationsClient<$Result.GetResult<Prisma.$InvitationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitations.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationsCountArgs>(
      args?: Subset<T, InvitationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationsAggregateArgs>(args: Subset<T, InvitationsAggregateArgs>): Prisma.PrismaPromise<GetInvitationsAggregateType<T>>

    /**
     * Group by Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationsGroupByArgs['orderBy'] }
        : { orderBy?: InvitationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitations model
   */
  readonly fields: InvitationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sender<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receiver<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Invitations model
   */ 
  interface InvitationsFieldRefs {
    readonly id: FieldRef<"Invitations", 'Int'>
    readonly status: FieldRef<"Invitations", 'String'>
    readonly senderId: FieldRef<"Invitations", 'Int'>
    readonly receiverId: FieldRef<"Invitations", 'Int'>
    readonly roomId: FieldRef<"Invitations", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Invitations findUnique
   */
  export type InvitationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where: InvitationsWhereUniqueInput
  }


  /**
   * Invitations findUniqueOrThrow
   */
  export type InvitationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where: InvitationsWhereUniqueInput
  }


  /**
   * Invitations findFirst
   */
  export type InvitationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Invitations findFirstOrThrow
   */
  export type InvitationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Invitations findMany
   */
  export type InvitationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationsOrderByWithRelationInput | InvitationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationsScalarFieldEnum | InvitationsScalarFieldEnum[]
  }


  /**
   * Invitations create
   */
  export type InvitationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitations.
     */
    data: XOR<InvitationsCreateInput, InvitationsUncheckedCreateInput>
  }


  /**
   * Invitations createMany
   */
  export type InvitationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationsCreateManyInput | InvitationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Invitations update
   */
  export type InvitationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitations.
     */
    data: XOR<InvitationsUpdateInput, InvitationsUncheckedUpdateInput>
    /**
     * Choose, which Invitations to update.
     */
    where: InvitationsWhereUniqueInput
  }


  /**
   * Invitations updateMany
   */
  export type InvitationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationsUpdateManyMutationInput, InvitationsUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationsWhereInput
  }


  /**
   * Invitations upsert
   */
  export type InvitationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitations to update in case it exists.
     */
    where: InvitationsWhereUniqueInput
    /**
     * In case the Invitations found by the `where` argument doesn't exist, create a new Invitations with this data.
     */
    create: XOR<InvitationsCreateInput, InvitationsUncheckedCreateInput>
    /**
     * In case the Invitations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationsUpdateInput, InvitationsUncheckedUpdateInput>
  }


  /**
   * Invitations delete
   */
  export type InvitationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
    /**
     * Filter which Invitations to delete.
     */
    where: InvitationsWhereUniqueInput
  }


  /**
   * Invitations deleteMany
   */
  export type InvitationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationsWhereInput
  }


  /**
   * Invitations without action
   */
  export type InvitationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitations
     */
    select?: InvitationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvitationsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    avatar: 'avatar',
    hashRt: 'hashRt',
    twofa: 'twofa',
    twofaEmail: 'twofaEmail',
    twoEnabled: 'twoEnabled',
    userStatus: 'userStatus',
    isActive: 'isActive',
    signedUp: 'signedUp'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const GameScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    userId: 'userId',
    gamesPlayed: 'gamesPlayed',
    wins: 'wins',
    loses: 'loses'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    myUserId: 'myUserId',
    oppUserId: 'oppUserId',
    myScore: 'myScore',
    oppScore: 'oppScore'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    type: 'type',
    read: 'read',
    senderId: 'senderId',
    receiverId: 'receiverId',
    mode: 'mode'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    chatId: 'chatId',
    chatUsers: 'chatUsers'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    messageId: 'messageId',
    textContent: 'textContent',
    createdAt: 'createdAt',
    MessageSenId: 'MessageSenId',
    msgChatId: 'msgChatId',
    msgRoomId: 'msgRoomId',
    type: 'type'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    roomName: 'roomName',
    roomAvatar: 'roomAvatar',
    roomType: 'roomType',
    roomPass: 'roomPass'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const RoomUsersScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    userId: 'userId',
    role: 'role',
    allowed: 'allowed'
  };

  export type RoomUsersScalarFieldEnum = (typeof RoomUsersScalarFieldEnum)[keyof typeof RoomUsersScalarFieldEnum]


  export const InvitationsScalarFieldEnum: {
    id: 'id',
    status: 'status',
    senderId: 'senderId',
    receiverId: 'receiverId',
    roomId: 'roomId'
  };

  export type InvitationsScalarFieldEnum = (typeof InvitationsScalarFieldEnum)[keyof typeof InvitationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'userStatus'
   */
  export type EnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus'>
    


  /**
   * Reference to a field of type 'userStatus[]'
   */
  export type ListEnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twofaEmail?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
    isActive?: BoolFilter<"Users"> | boolean
    signedUp?: BoolFilter<"Users"> | boolean
    pendingFriendReq?: UsersListRelationFilter
    pendingFriendReqOf?: UsersListRelationFilter
    friends?: UsersListRelationFilter
    friendOf?: UsersListRelationFilter
    blocked?: UsersListRelationFilter
    blockedBy?: UsersListRelationFilter
    senNotification?: NotificationsListRelationFilter
    recNotification?: NotificationsListRelationFilter
    chat?: ChatListRelationFilter
    MessageSenId?: MessageListRelationFilter
    rooms?: RoomUsersListRelationFilter
    roomInvitationSender?: InvitationsListRelationFilter
    roomInvitationReceiver?: InvitationsListRelationFilter
    games?: XOR<GameNullableRelationFilter, GameWhereInput> | null
    myHistoryGames?: HistoryListRelationFilter
    oppHistoryGames?: HistoryListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    hashRt?: SortOrderInput | SortOrder
    twofa?: SortOrderInput | SortOrder
    twofaEmail?: SortOrderInput | SortOrder
    twoEnabled?: SortOrder
    userStatus?: SortOrder
    isActive?: SortOrder
    signedUp?: SortOrder
    pendingFriendReq?: UsersOrderByRelationAggregateInput
    pendingFriendReqOf?: UsersOrderByRelationAggregateInput
    friends?: UsersOrderByRelationAggregateInput
    friendOf?: UsersOrderByRelationAggregateInput
    blocked?: UsersOrderByRelationAggregateInput
    blockedBy?: UsersOrderByRelationAggregateInput
    senNotification?: NotificationsOrderByRelationAggregateInput
    recNotification?: NotificationsOrderByRelationAggregateInput
    chat?: ChatOrderByRelationAggregateInput
    MessageSenId?: MessageOrderByRelationAggregateInput
    rooms?: RoomUsersOrderByRelationAggregateInput
    roomInvitationSender?: InvitationsOrderByRelationAggregateInput
    roomInvitationReceiver?: InvitationsOrderByRelationAggregateInput
    games?: GameOrderByWithRelationInput
    myHistoryGames?: HistoryOrderByRelationAggregateInput
    oppHistoryGames?: HistoryOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    twofaEmail?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
    isActive?: BoolFilter<"Users"> | boolean
    signedUp?: BoolFilter<"Users"> | boolean
    pendingFriendReq?: UsersListRelationFilter
    pendingFriendReqOf?: UsersListRelationFilter
    friends?: UsersListRelationFilter
    friendOf?: UsersListRelationFilter
    blocked?: UsersListRelationFilter
    blockedBy?: UsersListRelationFilter
    senNotification?: NotificationsListRelationFilter
    recNotification?: NotificationsListRelationFilter
    chat?: ChatListRelationFilter
    MessageSenId?: MessageListRelationFilter
    rooms?: RoomUsersListRelationFilter
    roomInvitationSender?: InvitationsListRelationFilter
    roomInvitationReceiver?: InvitationsListRelationFilter
    games?: XOR<GameNullableRelationFilter, GameWhereInput> | null
    myHistoryGames?: HistoryListRelationFilter
    oppHistoryGames?: HistoryListRelationFilter
  }, "id" | "username" | "email" | "twofaEmail">

  export type UsersOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    hashRt?: SortOrderInput | SortOrder
    twofa?: SortOrderInput | SortOrder
    twofaEmail?: SortOrderInput | SortOrder
    twoEnabled?: SortOrder
    userStatus?: SortOrder
    isActive?: SortOrder
    signedUp?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    id?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringNullableWithAggregatesFilter<"Users"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Users"> | string | null
    hashRt?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twofa?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twofaEmail?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twoEnabled?: BoolWithAggregatesFilter<"Users"> | boolean
    userStatus?: EnumuserStatusWithAggregatesFilter<"Users"> | $Enums.userStatus
    isActive?: BoolWithAggregatesFilter<"Users"> | boolean
    signedUp?: BoolWithAggregatesFilter<"Users"> | boolean
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    id?: IntFilter<"Game"> | number
    userId?: IntFilter<"Game"> | number
    gamesPlayed?: IntFilter<"Game"> | number
    wins?: IntFilter<"Game"> | number
    loses?: IntFilter<"Game"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type GameOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    gamesPlayed?: IntFilter<"Game"> | number
    wins?: IntFilter<"Game"> | number
    loses?: IntFilter<"Game"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "userId">

  export type GameOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    id?: IntWithAggregatesFilter<"Game"> | number
    userId?: IntWithAggregatesFilter<"Game"> | number
    gamesPlayed?: IntWithAggregatesFilter<"Game"> | number
    wins?: IntWithAggregatesFilter<"Game"> | number
    loses?: IntWithAggregatesFilter<"Game"> | number
  }

  export type HistoryWhereInput = {
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
    id?: IntFilter<"History"> | number
    myUserId?: IntFilter<"History"> | number
    oppUserId?: IntFilter<"History"> | number
    myScore?: IntFilter<"History"> | number
    oppScore?: IntFilter<"History"> | number
    myUser?: XOR<UsersRelationFilter, UsersWhereInput>
    oppUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type HistoryOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
    myUser?: UsersOrderByWithRelationInput
    oppUser?: UsersOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
    myUserId?: IntFilter<"History"> | number
    oppUserId?: IntFilter<"History"> | number
    myScore?: IntFilter<"History"> | number
    oppScore?: IntFilter<"History"> | number
    myUser?: XOR<UsersRelationFilter, UsersWhereInput>
    oppUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type HistoryOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    OR?: HistoryScalarWhereWithAggregatesInput[]
    NOT?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"History"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"History"> | Date | string
    id?: IntWithAggregatesFilter<"History"> | number
    myUserId?: IntWithAggregatesFilter<"History"> | number
    oppUserId?: IntWithAggregatesFilter<"History"> | number
    myScore?: IntWithAggregatesFilter<"History"> | number
    oppScore?: IntWithAggregatesFilter<"History"> | number
  }

  export type NotificationsWhereInput = {
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    id?: IntFilter<"Notifications"> | number
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
    mode?: StringNullableFilter<"Notifications"> | string | null
    senderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    receiverUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type NotificationsOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    type?: SortOrder
    read?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    mode?: SortOrderInput | SortOrder
    senderUser?: UsersOrderByWithRelationInput
    receiverUser?: UsersOrderByWithRelationInput
  }

  export type NotificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
    mode?: StringNullableFilter<"Notifications"> | string | null
    senderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    receiverUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type NotificationsOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    type?: SortOrder
    read?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    mode?: SortOrderInput | SortOrder
    _count?: NotificationsCountOrderByAggregateInput
    _avg?: NotificationsAvgOrderByAggregateInput
    _max?: NotificationsMaxOrderByAggregateInput
    _min?: NotificationsMinOrderByAggregateInput
    _sum?: NotificationsSumOrderByAggregateInput
  }

  export type NotificationsScalarWhereWithAggregatesInput = {
    AND?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    OR?: NotificationsScalarWhereWithAggregatesInput[]
    NOT?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
    id?: IntWithAggregatesFilter<"Notifications"> | number
    type?: EnumNotificationTypeWithAggregatesFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolWithAggregatesFilter<"Notifications"> | boolean
    senderId?: IntWithAggregatesFilter<"Notifications"> | number
    receiverId?: IntWithAggregatesFilter<"Notifications"> | number
    mode?: StringNullableWithAggregatesFilter<"Notifications"> | string | null
  }

  export type ChatWhereInput = {
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    chatId?: IntFilter<"Chat"> | number
    chatUsers?: IntNullableListFilter<"Chat">
    users?: UsersListRelationFilter
    msgChatId?: MessageListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    chatId?: SortOrder
    chatUsers?: SortOrder
    users?: UsersOrderByRelationAggregateInput
    msgChatId?: MessageOrderByRelationAggregateInput
  }

  export type ChatWhereUniqueInput = Prisma.AtLeast<{
    chatId?: number
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    chatUsers?: IntNullableListFilter<"Chat">
    users?: UsersListRelationFilter
    msgChatId?: MessageListRelationFilter
  }, "chatId">

  export type ChatOrderByWithAggregationInput = {
    chatId?: SortOrder
    chatUsers?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    OR?: ChatScalarWhereWithAggregatesInput[]
    NOT?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    chatId?: IntWithAggregatesFilter<"Chat"> | number
    chatUsers?: IntNullableListFilter<"Chat">
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    messageId?: IntFilter<"Message"> | number
    textContent?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    MessageSenId?: IntFilter<"Message"> | number
    msgChatId?: IntNullableFilter<"Message"> | number | null
    msgRoomId?: IntNullableFilter<"Message"> | number | null
    type?: StringFilter<"Message"> | string
    senderId?: XOR<UsersRelationFilter, UsersWhereInput>
    messageChatId?: XOR<ChatNullableRelationFilter, ChatWhereInput> | null
    messageRoomId?: XOR<RoomNullableRelationFilter, RoomWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    messageId?: SortOrder
    textContent?: SortOrder
    createdAt?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrderInput | SortOrder
    msgRoomId?: SortOrderInput | SortOrder
    type?: SortOrder
    senderId?: UsersOrderByWithRelationInput
    messageChatId?: ChatOrderByWithRelationInput
    messageRoomId?: RoomOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    messageId?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    textContent?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    MessageSenId?: IntFilter<"Message"> | number
    msgChatId?: IntNullableFilter<"Message"> | number | null
    msgRoomId?: IntNullableFilter<"Message"> | number | null
    type?: StringFilter<"Message"> | string
    senderId?: XOR<UsersRelationFilter, UsersWhereInput>
    messageChatId?: XOR<ChatNullableRelationFilter, ChatWhereInput> | null
    messageRoomId?: XOR<RoomNullableRelationFilter, RoomWhereInput> | null
  }, "messageId">

  export type MessageOrderByWithAggregationInput = {
    messageId?: SortOrder
    textContent?: SortOrder
    createdAt?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrderInput | SortOrder
    msgRoomId?: SortOrderInput | SortOrder
    type?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    messageId?: IntWithAggregatesFilter<"Message"> | number
    textContent?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    MessageSenId?: IntWithAggregatesFilter<"Message"> | number
    msgChatId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    msgRoomId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    type?: StringWithAggregatesFilter<"Message"> | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: IntFilter<"Room"> | number
    roomName?: StringFilter<"Room"> | string
    roomAvatar?: StringFilter<"Room"> | string
    roomType?: StringFilter<"Room"> | string
    roomPass?: StringNullableFilter<"Room"> | string | null
    roomUsers?: RoomUsersListRelationFilter
    invitations?: InvitationsListRelationFilter
    msgRoomId?: MessageListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    roomName?: SortOrder
    roomAvatar?: SortOrder
    roomType?: SortOrder
    roomPass?: SortOrderInput | SortOrder
    roomUsers?: RoomUsersOrderByRelationAggregateInput
    invitations?: InvitationsOrderByRelationAggregateInput
    msgRoomId?: MessageOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    roomName?: StringFilter<"Room"> | string
    roomAvatar?: StringFilter<"Room"> | string
    roomType?: StringFilter<"Room"> | string
    roomPass?: StringNullableFilter<"Room"> | string | null
    roomUsers?: RoomUsersListRelationFilter
    invitations?: InvitationsListRelationFilter
    msgRoomId?: MessageListRelationFilter
  }, "id">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    roomName?: SortOrder
    roomAvatar?: SortOrder
    roomType?: SortOrder
    roomPass?: SortOrderInput | SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Room"> | number
    roomName?: StringWithAggregatesFilter<"Room"> | string
    roomAvatar?: StringWithAggregatesFilter<"Room"> | string
    roomType?: StringWithAggregatesFilter<"Room"> | string
    roomPass?: StringNullableWithAggregatesFilter<"Room"> | string | null
  }

  export type RoomUsersWhereInput = {
    AND?: RoomUsersWhereInput | RoomUsersWhereInput[]
    OR?: RoomUsersWhereInput[]
    NOT?: RoomUsersWhereInput | RoomUsersWhereInput[]
    id?: IntFilter<"RoomUsers"> | number
    roomId?: IntFilter<"RoomUsers"> | number
    userId?: IntFilter<"RoomUsers"> | number
    role?: StringFilter<"RoomUsers"> | string
    allowed?: BoolFilter<"RoomUsers"> | boolean
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type RoomUsersOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    allowed?: SortOrder
    room?: RoomOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type RoomUsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomUsersWhereInput | RoomUsersWhereInput[]
    OR?: RoomUsersWhereInput[]
    NOT?: RoomUsersWhereInput | RoomUsersWhereInput[]
    roomId?: IntFilter<"RoomUsers"> | number
    userId?: IntFilter<"RoomUsers"> | number
    role?: StringFilter<"RoomUsers"> | string
    allowed?: BoolFilter<"RoomUsers"> | boolean
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type RoomUsersOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    allowed?: SortOrder
    _count?: RoomUsersCountOrderByAggregateInput
    _avg?: RoomUsersAvgOrderByAggregateInput
    _max?: RoomUsersMaxOrderByAggregateInput
    _min?: RoomUsersMinOrderByAggregateInput
    _sum?: RoomUsersSumOrderByAggregateInput
  }

  export type RoomUsersScalarWhereWithAggregatesInput = {
    AND?: RoomUsersScalarWhereWithAggregatesInput | RoomUsersScalarWhereWithAggregatesInput[]
    OR?: RoomUsersScalarWhereWithAggregatesInput[]
    NOT?: RoomUsersScalarWhereWithAggregatesInput | RoomUsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomUsers"> | number
    roomId?: IntWithAggregatesFilter<"RoomUsers"> | number
    userId?: IntWithAggregatesFilter<"RoomUsers"> | number
    role?: StringWithAggregatesFilter<"RoomUsers"> | string
    allowed?: BoolWithAggregatesFilter<"RoomUsers"> | boolean
  }

  export type InvitationsWhereInput = {
    AND?: InvitationsWhereInput | InvitationsWhereInput[]
    OR?: InvitationsWhereInput[]
    NOT?: InvitationsWhereInput | InvitationsWhereInput[]
    id?: IntFilter<"Invitations"> | number
    status?: StringFilter<"Invitations"> | string
    senderId?: IntFilter<"Invitations"> | number
    receiverId?: IntFilter<"Invitations"> | number
    roomId?: IntFilter<"Invitations"> | number
    sender?: XOR<UsersRelationFilter, UsersWhereInput>
    receiver?: XOR<UsersRelationFilter, UsersWhereInput>
    room?: XOR<RoomRelationFilter, RoomWhereInput>
  }

  export type InvitationsOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
    sender?: UsersOrderByWithRelationInput
    receiver?: UsersOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
  }

  export type InvitationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvitationsWhereInput | InvitationsWhereInput[]
    OR?: InvitationsWhereInput[]
    NOT?: InvitationsWhereInput | InvitationsWhereInput[]
    status?: StringFilter<"Invitations"> | string
    senderId?: IntFilter<"Invitations"> | number
    receiverId?: IntFilter<"Invitations"> | number
    roomId?: IntFilter<"Invitations"> | number
    sender?: XOR<UsersRelationFilter, UsersWhereInput>
    receiver?: XOR<UsersRelationFilter, UsersWhereInput>
    room?: XOR<RoomRelationFilter, RoomWhereInput>
  }, "id">

  export type InvitationsOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
    _count?: InvitationsCountOrderByAggregateInput
    _avg?: InvitationsAvgOrderByAggregateInput
    _max?: InvitationsMaxOrderByAggregateInput
    _min?: InvitationsMinOrderByAggregateInput
    _sum?: InvitationsSumOrderByAggregateInput
  }

  export type InvitationsScalarWhereWithAggregatesInput = {
    AND?: InvitationsScalarWhereWithAggregatesInput | InvitationsScalarWhereWithAggregatesInput[]
    OR?: InvitationsScalarWhereWithAggregatesInput[]
    NOT?: InvitationsScalarWhereWithAggregatesInput | InvitationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invitations"> | number
    status?: StringWithAggregatesFilter<"Invitations"> | string
    senderId?: IntWithAggregatesFilter<"Invitations"> | number
    receiverId?: IntWithAggregatesFilter<"Invitations"> | number
    roomId?: IntWithAggregatesFilter<"Invitations"> | number
  }

  export type UsersCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
  }

  export type UsersUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    gamesPlayed?: number
    wins?: number
    loses?: number
    user: UsersCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    userId: number
    gamesPlayed?: number
    wins?: number
    loses?: number
  }

  export type GameUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    userId: number
    gamesPlayed?: number
    wins?: number
    loses?: number
  }

  export type GameUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
  }

  export type GameUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    myScore: number
    oppScore: number
    myUser: UsersCreateNestedOneWithoutMyHistoryGamesInput
    oppUser: UsersCreateNestedOneWithoutOppHistoryGamesInput
  }

  export type HistoryUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    myUserId: number
    oppUserId: number
    myScore: number
    oppScore: number
  }

  export type HistoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
    myUser?: UsersUpdateOneRequiredWithoutMyHistoryGamesNestedInput
    oppUser?: UsersUpdateOneRequiredWithoutOppHistoryGamesNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    myUserId?: IntFieldUpdateOperationsInput | number
    oppUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    myUserId: number
    oppUserId: number
    myScore: number
    oppScore: number
  }

  export type HistoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    myUserId?: IntFieldUpdateOperationsInput | number
    oppUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.NotificationType
    read?: boolean
    mode?: string | null
    senderUser: UsersCreateNestedOneWithoutSenNotificationInput
    receiverUser: UsersCreateNestedOneWithoutRecNotificationInput
  }

  export type NotificationsUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    senderId: number
    receiverId: number
    mode?: string | null
  }

  export type NotificationsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    mode?: NullableStringFieldUpdateOperationsInput | string | null
    senderUser?: UsersUpdateOneRequiredWithoutSenNotificationNestedInput
    receiverUser?: UsersUpdateOneRequiredWithoutRecNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    senderId: number
    receiverId: number
    mode?: string | null
  }

  export type NotificationsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatCreateInput = {
    chatUsers?: ChatCreatechatUsersInput | number[]
    users?: UsersCreateNestedManyWithoutChatInput
    msgChatId?: MessageCreateNestedManyWithoutMessageChatIdInput
  }

  export type ChatUncheckedCreateInput = {
    chatId?: number
    chatUsers?: ChatCreatechatUsersInput | number[]
    users?: UsersUncheckedCreateNestedManyWithoutChatInput
    msgChatId?: MessageUncheckedCreateNestedManyWithoutMessageChatIdInput
  }

  export type ChatUpdateInput = {
    chatUsers?: ChatUpdatechatUsersInput | number[]
    users?: UsersUpdateManyWithoutChatNestedInput
    msgChatId?: MessageUpdateManyWithoutMessageChatIdNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    chatUsers?: ChatUpdatechatUsersInput | number[]
    users?: UsersUncheckedUpdateManyWithoutChatNestedInput
    msgChatId?: MessageUncheckedUpdateManyWithoutMessageChatIdNestedInput
  }

  export type ChatCreateManyInput = {
    chatId?: number
    chatUsers?: ChatCreatechatUsersInput | number[]
  }

  export type ChatUpdateManyMutationInput = {
    chatUsers?: ChatUpdatechatUsersInput | number[]
  }

  export type ChatUncheckedUpdateManyInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    chatUsers?: ChatUpdatechatUsersInput | number[]
  }

  export type MessageCreateInput = {
    textContent: string
    createdAt?: Date | string
    type: string
    senderId: UsersCreateNestedOneWithoutMessageSenIdInput
    messageChatId?: ChatCreateNestedOneWithoutMsgChatIdInput
    messageRoomId?: RoomCreateNestedOneWithoutMsgRoomIdInput
  }

  export type MessageUncheckedCreateInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgChatId?: number | null
    msgRoomId?: number | null
    type: string
  }

  export type MessageUpdateInput = {
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    senderId?: UsersUpdateOneRequiredWithoutMessageSenIdNestedInput
    messageChatId?: ChatUpdateOneWithoutMsgChatIdNestedInput
    messageRoomId?: RoomUpdateOneWithoutMsgRoomIdNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgChatId?: number | null
    msgRoomId?: number | null
    type: string
  }

  export type MessageUpdateManyMutationInput = {
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersCreateNestedManyWithoutRoomInput
    invitations?: InvitationsCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersUncheckedCreateNestedManyWithoutRoomInput
    invitations?: InvitationsUncheckedCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageUncheckedCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomUpdateInput = {
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUpdateManyWithoutRoomNestedInput
    invitations?: InvitationsUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUncheckedUpdateManyWithoutRoomNestedInput
    invitations?: InvitationsUncheckedUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUncheckedUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
  }

  export type RoomUpdateManyMutationInput = {
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoomUsersCreateInput = {
    role: string
    allowed: boolean
    room: RoomCreateNestedOneWithoutRoomUsersInput
    user: UsersCreateNestedOneWithoutRoomsInput
  }

  export type RoomUsersUncheckedCreateInput = {
    id?: number
    roomId: number
    userId: number
    role: string
    allowed: boolean
  }

  export type RoomUsersUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutRoomUsersNestedInput
    user?: UsersUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type RoomUsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUsersCreateManyInput = {
    id?: number
    roomId: number
    userId: number
    role: string
    allowed: boolean
  }

  export type RoomUsersUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationsCreateInput = {
    status?: string
    sender: UsersCreateNestedOneWithoutRoomInvitationSenderInput
    receiver: UsersCreateNestedOneWithoutRoomInvitationReceiverInput
    room: RoomCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationsUncheckedCreateInput = {
    id?: number
    status?: string
    senderId: number
    receiverId: number
    roomId: number
  }

  export type InvitationsUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    sender?: UsersUpdateOneRequiredWithoutRoomInvitationSenderNestedInput
    receiver?: UsersUpdateOneRequiredWithoutRoomInvitationReceiverNestedInput
    room?: RoomUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationsCreateManyInput = {
    id?: number
    status?: string
    senderId: number
    receiverId: number
    roomId: number
  }

  export type InvitationsUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: NotificationsWhereInput
    some?: NotificationsWhereInput
    none?: NotificationsWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type RoomUsersListRelationFilter = {
    every?: RoomUsersWhereInput
    some?: RoomUsersWhereInput
    none?: RoomUsersWhereInput
  }

  export type InvitationsListRelationFilter = {
    every?: InvitationsWhereInput
    some?: InvitationsWhereInput
    none?: InvitationsWhereInput
  }

  export type GameNullableRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomUsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    userStatus?: SortOrder
    isActive?: SortOrder
    signedUp?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    userStatus?: SortOrder
    isActive?: SortOrder
    signedUp?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    userStatus?: SortOrder
    isActive?: SortOrder
    signedUp?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type GameCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gamesPlayed?: SortOrder
    wins?: SortOrder
    loses?: SortOrder
  }

  export type HistoryCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    id?: SortOrder
    myUserId?: SortOrder
    oppUserId?: SortOrder
    myScore?: SortOrder
    oppScore?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationsCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    type?: SortOrder
    read?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    mode?: SortOrder
  }

  export type NotificationsAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type NotificationsMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    type?: SortOrder
    read?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    mode?: SortOrder
  }

  export type NotificationsMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    type?: SortOrder
    read?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    mode?: SortOrder
  }

  export type NotificationsSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ChatCountOrderByAggregateInput = {
    chatId?: SortOrder
    chatUsers?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    chatId?: SortOrder
    chatUsers?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    chatId?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    chatId?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    chatId?: SortOrder
    chatUsers?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ChatNullableRelationFilter = {
    is?: ChatWhereInput | null
    isNot?: ChatWhereInput | null
  }

  export type RoomNullableRelationFilter = {
    is?: RoomWhereInput | null
    isNot?: RoomWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    messageId?: SortOrder
    textContent?: SortOrder
    createdAt?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrder
    msgRoomId?: SortOrder
    type?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    messageId?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrder
    msgRoomId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    messageId?: SortOrder
    textContent?: SortOrder
    createdAt?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrder
    msgRoomId?: SortOrder
    type?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    messageId?: SortOrder
    textContent?: SortOrder
    createdAt?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrder
    msgRoomId?: SortOrder
    type?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    messageId?: SortOrder
    MessageSenId?: SortOrder
    msgChatId?: SortOrder
    msgRoomId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    roomName?: SortOrder
    roomAvatar?: SortOrder
    roomType?: SortOrder
    roomPass?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    roomName?: SortOrder
    roomAvatar?: SortOrder
    roomType?: SortOrder
    roomPass?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    roomName?: SortOrder
    roomAvatar?: SortOrder
    roomType?: SortOrder
    roomPass?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type RoomUsersCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    allowed?: SortOrder
  }

  export type RoomUsersAvgOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
  }

  export type RoomUsersMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    allowed?: SortOrder
  }

  export type RoomUsersMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    allowed?: SortOrder
  }

  export type RoomUsersSumOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    userId?: SortOrder
  }

  export type InvitationsCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
  }

  export type InvitationsAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
  }

  export type InvitationsMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
  }

  export type InvitationsMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
  }

  export type InvitationsSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    roomId?: SortOrder
  }

  export type UsersCreateNestedManyWithoutPendingFriendReqOfInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutPendingFriendReqInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutFriendOfInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutFriendsInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutBlockedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutReceiverUserInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutUsersInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput> | ChatCreateWithoutUsersInput[] | ChatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput | ChatCreateOrConnectWithoutUsersInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderIdInput = {
    create?: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput> | MessageCreateWithoutSenderIdInput[] | MessageUncheckedCreateWithoutSenderIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderIdInput | MessageCreateOrConnectWithoutSenderIdInput[]
    createMany?: MessageCreateManySenderIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type RoomUsersCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput> | RoomUsersCreateWithoutUserInput[] | RoomUsersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutUserInput | RoomUsersCreateOrConnectWithoutUserInput[]
    createMany?: RoomUsersCreateManyUserInputEnvelope
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
  }

  export type InvitationsCreateNestedManyWithoutSenderInput = {
    create?: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput> | InvitationsCreateWithoutSenderInput[] | InvitationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutSenderInput | InvitationsCreateOrConnectWithoutSenderInput[]
    createMany?: InvitationsCreateManySenderInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type InvitationsCreateNestedManyWithoutReceiverInput = {
    create?: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput> | InvitationsCreateWithoutReceiverInput[] | InvitationsUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutReceiverInput | InvitationsCreateOrConnectWithoutReceiverInput[]
    createMany?: InvitationsCreateManyReceiverInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type GameCreateNestedOneWithoutUserInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInput
    connect?: GameWhereUniqueInput
  }

  export type HistoryCreateNestedManyWithoutMyUserInput = {
    create?: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput> | HistoryCreateWithoutMyUserInput[] | HistoryUncheckedCreateWithoutMyUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMyUserInput | HistoryCreateOrConnectWithoutMyUserInput[]
    createMany?: HistoryCreateManyMyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutOppUserInput = {
    create?: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput> | HistoryCreateWithoutOppUserInput[] | HistoryUncheckedCreateWithoutOppUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutOppUserInput | HistoryCreateOrConnectWithoutOppUserInput[]
    createMany?: HistoryCreateManyOppUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutFriendOfInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutFriendsInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutBlockedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput> | ChatCreateWithoutUsersInput[] | ChatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput | ChatCreateOrConnectWithoutUsersInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderIdInput = {
    create?: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput> | MessageCreateWithoutSenderIdInput[] | MessageUncheckedCreateWithoutSenderIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderIdInput | MessageCreateOrConnectWithoutSenderIdInput[]
    createMany?: MessageCreateManySenderIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type RoomUsersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput> | RoomUsersCreateWithoutUserInput[] | RoomUsersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutUserInput | RoomUsersCreateOrConnectWithoutUserInput[]
    createMany?: RoomUsersCreateManyUserInputEnvelope
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
  }

  export type InvitationsUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput> | InvitationsCreateWithoutSenderInput[] | InvitationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutSenderInput | InvitationsCreateOrConnectWithoutSenderInput[]
    createMany?: InvitationsCreateManySenderInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type InvitationsUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput> | InvitationsCreateWithoutReceiverInput[] | InvitationsUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutReceiverInput | InvitationsCreateOrConnectWithoutReceiverInput[]
    createMany?: InvitationsCreateManyReceiverInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInput
    connect?: GameWhereUniqueInput
  }

  export type HistoryUncheckedCreateNestedManyWithoutMyUserInput = {
    create?: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput> | HistoryCreateWithoutMyUserInput[] | HistoryUncheckedCreateWithoutMyUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMyUserInput | HistoryCreateOrConnectWithoutMyUserInput[]
    createMany?: HistoryCreateManyMyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutOppUserInput = {
    create?: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput> | HistoryCreateWithoutOppUserInput[] | HistoryUncheckedCreateWithoutOppUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutOppUserInput | HistoryCreateOrConnectWithoutOppUserInput[]
    createMany?: HistoryCreateManyOppUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumuserStatusFieldUpdateOperationsInput = {
    set?: $Enums.userStatus
  }

  export type UsersUpdateManyWithoutPendingFriendReqOfNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput | UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutPendingFriendReqNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqInput | UsersUpdateManyWithWhereWithoutPendingFriendReqInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutFriendOfNestedInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendOfInput | UsersUpsertWithWhereUniqueWithoutFriendOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendOfInput | UsersUpdateWithWhereUniqueWithoutFriendOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendOfInput | UsersUpdateManyWithWhereWithoutFriendOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutFriendsNestedInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendsInput | UsersUpsertWithWhereUniqueWithoutFriendsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendsInput | UsersUpdateWithWhereUniqueWithoutFriendsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendsInput | UsersUpdateManyWithWhereWithoutFriendsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedByInput | UsersUpsertWithWhereUniqueWithoutBlockedByInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedByInput | UsersUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedByInput | UsersUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutBlockedNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedInput | UsersUpsertWithWhereUniqueWithoutBlockedInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedInput | UsersUpdateWithWhereUniqueWithoutBlockedInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedInput | UsersUpdateManyWithWhereWithoutBlockedInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutSenderUserInput | NotificationsUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutSenderUserInput | NotificationsUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutSenderUserInput | NotificationsUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutReceiverUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput | NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput | NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutReceiverUserInput | NotificationsUpdateManyWithWhereWithoutReceiverUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput> | ChatCreateWithoutUsersInput[] | ChatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput | ChatCreateOrConnectWithoutUsersInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUsersInput | ChatUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUsersInput | ChatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUsersInput | ChatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderIdNestedInput = {
    create?: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput> | MessageCreateWithoutSenderIdInput[] | MessageUncheckedCreateWithoutSenderIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderIdInput | MessageCreateOrConnectWithoutSenderIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderIdInput | MessageUpsertWithWhereUniqueWithoutSenderIdInput[]
    createMany?: MessageCreateManySenderIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderIdInput | MessageUpdateWithWhereUniqueWithoutSenderIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderIdInput | MessageUpdateManyWithWhereWithoutSenderIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoomUsersUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput> | RoomUsersCreateWithoutUserInput[] | RoomUsersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutUserInput | RoomUsersCreateOrConnectWithoutUserInput[]
    upsert?: RoomUsersUpsertWithWhereUniqueWithoutUserInput | RoomUsersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomUsersCreateManyUserInputEnvelope
    set?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    disconnect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    delete?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    update?: RoomUsersUpdateWithWhereUniqueWithoutUserInput | RoomUsersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomUsersUpdateManyWithWhereWithoutUserInput | RoomUsersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
  }

  export type InvitationsUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput> | InvitationsCreateWithoutSenderInput[] | InvitationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutSenderInput | InvitationsCreateOrConnectWithoutSenderInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutSenderInput | InvitationsUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InvitationsCreateManySenderInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutSenderInput | InvitationsUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutSenderInput | InvitationsUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type InvitationsUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput> | InvitationsCreateWithoutReceiverInput[] | InvitationsUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutReceiverInput | InvitationsCreateOrConnectWithoutReceiverInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutReceiverInput | InvitationsUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: InvitationsCreateManyReceiverInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutReceiverInput | InvitationsUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutReceiverInput | InvitationsUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type GameUpdateOneWithoutUserNestedInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInput
    upsert?: GameUpsertWithoutUserInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutUserInput, GameUpdateWithoutUserInput>, GameUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithoutMyUserNestedInput = {
    create?: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput> | HistoryCreateWithoutMyUserInput[] | HistoryUncheckedCreateWithoutMyUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMyUserInput | HistoryCreateOrConnectWithoutMyUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutMyUserInput | HistoryUpsertWithWhereUniqueWithoutMyUserInput[]
    createMany?: HistoryCreateManyMyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutMyUserInput | HistoryUpdateWithWhereUniqueWithoutMyUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutMyUserInput | HistoryUpdateManyWithWhereWithoutMyUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutOppUserNestedInput = {
    create?: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput> | HistoryCreateWithoutOppUserInput[] | HistoryUncheckedCreateWithoutOppUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutOppUserInput | HistoryCreateOrConnectWithoutOppUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutOppUserInput | HistoryUpsertWithWhereUniqueWithoutOppUserInput[]
    createMany?: HistoryCreateManyOppUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutOppUserInput | HistoryUpdateWithWhereUniqueWithoutOppUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutOppUserInput | HistoryUpdateManyWithWhereWithoutOppUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput | UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqInput | UsersUpdateManyWithWhereWithoutPendingFriendReqInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutFriendOfNestedInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendOfInput | UsersUpsertWithWhereUniqueWithoutFriendOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendOfInput | UsersUpdateWithWhereUniqueWithoutFriendOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendOfInput | UsersUpdateManyWithWhereWithoutFriendOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutFriendsNestedInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendsInput | UsersUpsertWithWhereUniqueWithoutFriendsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendsInput | UsersUpdateWithWhereUniqueWithoutFriendsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendsInput | UsersUpdateManyWithWhereWithoutFriendsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedByInput | UsersUpsertWithWhereUniqueWithoutBlockedByInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedByInput | UsersUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedByInput | UsersUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutBlockedNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedInput | UsersUpsertWithWhereUniqueWithoutBlockedInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedInput | UsersUpdateWithWhereUniqueWithoutBlockedInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedInput | UsersUpdateManyWithWhereWithoutBlockedInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutSenderUserInput | NotificationsUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutSenderUserInput | NotificationsUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutSenderUserInput | NotificationsUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput | NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput | NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutReceiverUserInput | NotificationsUpdateManyWithWhereWithoutReceiverUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput> | ChatCreateWithoutUsersInput[] | ChatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput | ChatCreateOrConnectWithoutUsersInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUsersInput | ChatUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUsersInput | ChatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUsersInput | ChatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderIdNestedInput = {
    create?: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput> | MessageCreateWithoutSenderIdInput[] | MessageUncheckedCreateWithoutSenderIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderIdInput | MessageCreateOrConnectWithoutSenderIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderIdInput | MessageUpsertWithWhereUniqueWithoutSenderIdInput[]
    createMany?: MessageCreateManySenderIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderIdInput | MessageUpdateWithWhereUniqueWithoutSenderIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderIdInput | MessageUpdateManyWithWhereWithoutSenderIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoomUsersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput> | RoomUsersCreateWithoutUserInput[] | RoomUsersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutUserInput | RoomUsersCreateOrConnectWithoutUserInput[]
    upsert?: RoomUsersUpsertWithWhereUniqueWithoutUserInput | RoomUsersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomUsersCreateManyUserInputEnvelope
    set?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    disconnect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    delete?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    update?: RoomUsersUpdateWithWhereUniqueWithoutUserInput | RoomUsersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomUsersUpdateManyWithWhereWithoutUserInput | RoomUsersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
  }

  export type InvitationsUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput> | InvitationsCreateWithoutSenderInput[] | InvitationsUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutSenderInput | InvitationsCreateOrConnectWithoutSenderInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutSenderInput | InvitationsUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InvitationsCreateManySenderInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutSenderInput | InvitationsUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutSenderInput | InvitationsUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type InvitationsUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput> | InvitationsCreateWithoutReceiverInput[] | InvitationsUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutReceiverInput | InvitationsCreateOrConnectWithoutReceiverInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutReceiverInput | InvitationsUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: InvitationsCreateManyReceiverInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutReceiverInput | InvitationsUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutReceiverInput | InvitationsUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type GameUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInput
    upsert?: GameUpsertWithoutUserInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutUserInput, GameUpdateWithoutUserInput>, GameUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUncheckedUpdateManyWithoutMyUserNestedInput = {
    create?: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput> | HistoryCreateWithoutMyUserInput[] | HistoryUncheckedCreateWithoutMyUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMyUserInput | HistoryCreateOrConnectWithoutMyUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutMyUserInput | HistoryUpsertWithWhereUniqueWithoutMyUserInput[]
    createMany?: HistoryCreateManyMyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutMyUserInput | HistoryUpdateWithWhereUniqueWithoutMyUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutMyUserInput | HistoryUpdateManyWithWhereWithoutMyUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutOppUserNestedInput = {
    create?: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput> | HistoryCreateWithoutOppUserInput[] | HistoryUncheckedCreateWithoutOppUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutOppUserInput | HistoryCreateOrConnectWithoutOppUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutOppUserInput | HistoryUpsertWithWhereUniqueWithoutOppUserInput[]
    createMany?: HistoryCreateManyOppUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutOppUserInput | HistoryUpdateWithWhereUniqueWithoutOppUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutOppUserInput | HistoryUpdateManyWithWhereWithoutOppUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutGamesInput = {
    create?: XOR<UsersCreateWithoutGamesInput, UsersUncheckedCreateWithoutGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGamesInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<UsersCreateWithoutGamesInput, UsersUncheckedCreateWithoutGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGamesInput
    upsert?: UsersUpsertWithoutGamesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutGamesInput, UsersUpdateWithoutGamesInput>, UsersUncheckedUpdateWithoutGamesInput>
  }

  export type UsersCreateNestedOneWithoutMyHistoryGamesInput = {
    create?: XOR<UsersCreateWithoutMyHistoryGamesInput, UsersUncheckedCreateWithoutMyHistoryGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMyHistoryGamesInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutOppHistoryGamesInput = {
    create?: XOR<UsersCreateWithoutOppHistoryGamesInput, UsersUncheckedCreateWithoutOppHistoryGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOppHistoryGamesInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMyHistoryGamesNestedInput = {
    create?: XOR<UsersCreateWithoutMyHistoryGamesInput, UsersUncheckedCreateWithoutMyHistoryGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMyHistoryGamesInput
    upsert?: UsersUpsertWithoutMyHistoryGamesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMyHistoryGamesInput, UsersUpdateWithoutMyHistoryGamesInput>, UsersUncheckedUpdateWithoutMyHistoryGamesInput>
  }

  export type UsersUpdateOneRequiredWithoutOppHistoryGamesNestedInput = {
    create?: XOR<UsersCreateWithoutOppHistoryGamesInput, UsersUncheckedCreateWithoutOppHistoryGamesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOppHistoryGamesInput
    upsert?: UsersUpsertWithoutOppHistoryGamesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutOppHistoryGamesInput, UsersUpdateWithoutOppHistoryGamesInput>, UsersUncheckedUpdateWithoutOppHistoryGamesInput>
  }

  export type UsersCreateNestedOneWithoutSenNotificationInput = {
    create?: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSenNotificationInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutRecNotificationInput = {
    create?: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecNotificationInput
    connect?: UsersWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UsersUpdateOneRequiredWithoutSenNotificationNestedInput = {
    create?: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSenNotificationInput
    upsert?: UsersUpsertWithoutSenNotificationInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSenNotificationInput, UsersUpdateWithoutSenNotificationInput>, UsersUncheckedUpdateWithoutSenNotificationInput>
  }

  export type UsersUpdateOneRequiredWithoutRecNotificationNestedInput = {
    create?: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecNotificationInput
    upsert?: UsersUpsertWithoutRecNotificationInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRecNotificationInput, UsersUpdateWithoutRecNotificationInput>, UsersUncheckedUpdateWithoutRecNotificationInput>
  }

  export type ChatCreatechatUsersInput = {
    set: number[]
  }

  export type UsersCreateNestedManyWithoutChatInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput> | UsersCreateWithoutChatInput[] | UsersUncheckedCreateWithoutChatInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput | UsersCreateOrConnectWithoutChatInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutMessageChatIdInput = {
    create?: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput> | MessageCreateWithoutMessageChatIdInput[] | MessageUncheckedCreateWithoutMessageChatIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageChatIdInput | MessageCreateOrConnectWithoutMessageChatIdInput[]
    createMany?: MessageCreateManyMessageChatIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput> | UsersCreateWithoutChatInput[] | UsersUncheckedCreateWithoutChatInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput | UsersCreateOrConnectWithoutChatInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutMessageChatIdInput = {
    create?: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput> | MessageCreateWithoutMessageChatIdInput[] | MessageUncheckedCreateWithoutMessageChatIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageChatIdInput | MessageCreateOrConnectWithoutMessageChatIdInput[]
    createMany?: MessageCreateManyMessageChatIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChatUpdatechatUsersInput = {
    set?: number[]
    push?: number | number[]
  }

  export type UsersUpdateManyWithoutChatNestedInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput> | UsersCreateWithoutChatInput[] | UsersUncheckedCreateWithoutChatInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput | UsersCreateOrConnectWithoutChatInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutChatInput | UsersUpsertWithWhereUniqueWithoutChatInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutChatInput | UsersUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutChatInput | UsersUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutMessageChatIdNestedInput = {
    create?: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput> | MessageCreateWithoutMessageChatIdInput[] | MessageUncheckedCreateWithoutMessageChatIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageChatIdInput | MessageCreateOrConnectWithoutMessageChatIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMessageChatIdInput | MessageUpsertWithWhereUniqueWithoutMessageChatIdInput[]
    createMany?: MessageCreateManyMessageChatIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMessageChatIdInput | MessageUpdateWithWhereUniqueWithoutMessageChatIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMessageChatIdInput | MessageUpdateManyWithWhereWithoutMessageChatIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput> | UsersCreateWithoutChatInput[] | UsersUncheckedCreateWithoutChatInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput | UsersCreateOrConnectWithoutChatInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutChatInput | UsersUpsertWithWhereUniqueWithoutChatInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutChatInput | UsersUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutChatInput | UsersUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutMessageChatIdNestedInput = {
    create?: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput> | MessageCreateWithoutMessageChatIdInput[] | MessageUncheckedCreateWithoutMessageChatIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageChatIdInput | MessageCreateOrConnectWithoutMessageChatIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMessageChatIdInput | MessageUpsertWithWhereUniqueWithoutMessageChatIdInput[]
    createMany?: MessageCreateManyMessageChatIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMessageChatIdInput | MessageUpdateWithWhereUniqueWithoutMessageChatIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMessageChatIdInput | MessageUpdateManyWithWhereWithoutMessageChatIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutMessageSenIdInput = {
    create?: XOR<UsersCreateWithoutMessageSenIdInput, UsersUncheckedCreateWithoutMessageSenIdInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMessageSenIdInput
    connect?: UsersWhereUniqueInput
  }

  export type ChatCreateNestedOneWithoutMsgChatIdInput = {
    create?: XOR<ChatCreateWithoutMsgChatIdInput, ChatUncheckedCreateWithoutMsgChatIdInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMsgChatIdInput
    connect?: ChatWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutMsgRoomIdInput = {
    create?: XOR<RoomCreateWithoutMsgRoomIdInput, RoomUncheckedCreateWithoutMsgRoomIdInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMsgRoomIdInput
    connect?: RoomWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMessageSenIdNestedInput = {
    create?: XOR<UsersCreateWithoutMessageSenIdInput, UsersUncheckedCreateWithoutMessageSenIdInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMessageSenIdInput
    upsert?: UsersUpsertWithoutMessageSenIdInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMessageSenIdInput, UsersUpdateWithoutMessageSenIdInput>, UsersUncheckedUpdateWithoutMessageSenIdInput>
  }

  export type ChatUpdateOneWithoutMsgChatIdNestedInput = {
    create?: XOR<ChatCreateWithoutMsgChatIdInput, ChatUncheckedCreateWithoutMsgChatIdInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMsgChatIdInput
    upsert?: ChatUpsertWithoutMsgChatIdInput
    disconnect?: ChatWhereInput | boolean
    delete?: ChatWhereInput | boolean
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutMsgChatIdInput, ChatUpdateWithoutMsgChatIdInput>, ChatUncheckedUpdateWithoutMsgChatIdInput>
  }

  export type RoomUpdateOneWithoutMsgRoomIdNestedInput = {
    create?: XOR<RoomCreateWithoutMsgRoomIdInput, RoomUncheckedCreateWithoutMsgRoomIdInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMsgRoomIdInput
    upsert?: RoomUpsertWithoutMsgRoomIdInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutMsgRoomIdInput, RoomUpdateWithoutMsgRoomIdInput>, RoomUncheckedUpdateWithoutMsgRoomIdInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoomUsersCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput> | RoomUsersCreateWithoutRoomInput[] | RoomUsersUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutRoomInput | RoomUsersCreateOrConnectWithoutRoomInput[]
    createMany?: RoomUsersCreateManyRoomInputEnvelope
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
  }

  export type InvitationsCreateNestedManyWithoutRoomInput = {
    create?: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput> | InvitationsCreateWithoutRoomInput[] | InvitationsUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutRoomInput | InvitationsCreateOrConnectWithoutRoomInput[]
    createMany?: InvitationsCreateManyRoomInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutMessageRoomIdInput = {
    create?: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput> | MessageCreateWithoutMessageRoomIdInput[] | MessageUncheckedCreateWithoutMessageRoomIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageRoomIdInput | MessageCreateOrConnectWithoutMessageRoomIdInput[]
    createMany?: MessageCreateManyMessageRoomIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type RoomUsersUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput> | RoomUsersCreateWithoutRoomInput[] | RoomUsersUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutRoomInput | RoomUsersCreateOrConnectWithoutRoomInput[]
    createMany?: RoomUsersCreateManyRoomInputEnvelope
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
  }

  export type InvitationsUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput> | InvitationsCreateWithoutRoomInput[] | InvitationsUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutRoomInput | InvitationsCreateOrConnectWithoutRoomInput[]
    createMany?: InvitationsCreateManyRoomInputEnvelope
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutMessageRoomIdInput = {
    create?: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput> | MessageCreateWithoutMessageRoomIdInput[] | MessageUncheckedCreateWithoutMessageRoomIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageRoomIdInput | MessageCreateOrConnectWithoutMessageRoomIdInput[]
    createMany?: MessageCreateManyMessageRoomIdInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type RoomUsersUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput> | RoomUsersCreateWithoutRoomInput[] | RoomUsersUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutRoomInput | RoomUsersCreateOrConnectWithoutRoomInput[]
    upsert?: RoomUsersUpsertWithWhereUniqueWithoutRoomInput | RoomUsersUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomUsersCreateManyRoomInputEnvelope
    set?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    disconnect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    delete?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    update?: RoomUsersUpdateWithWhereUniqueWithoutRoomInput | RoomUsersUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomUsersUpdateManyWithWhereWithoutRoomInput | RoomUsersUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
  }

  export type InvitationsUpdateManyWithoutRoomNestedInput = {
    create?: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput> | InvitationsCreateWithoutRoomInput[] | InvitationsUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutRoomInput | InvitationsCreateOrConnectWithoutRoomInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutRoomInput | InvitationsUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: InvitationsCreateManyRoomInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutRoomInput | InvitationsUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutRoomInput | InvitationsUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutMessageRoomIdNestedInput = {
    create?: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput> | MessageCreateWithoutMessageRoomIdInput[] | MessageUncheckedCreateWithoutMessageRoomIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageRoomIdInput | MessageCreateOrConnectWithoutMessageRoomIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMessageRoomIdInput | MessageUpsertWithWhereUniqueWithoutMessageRoomIdInput[]
    createMany?: MessageCreateManyMessageRoomIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMessageRoomIdInput | MessageUpdateWithWhereUniqueWithoutMessageRoomIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMessageRoomIdInput | MessageUpdateManyWithWhereWithoutMessageRoomIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoomUsersUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput> | RoomUsersCreateWithoutRoomInput[] | RoomUsersUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomUsersCreateOrConnectWithoutRoomInput | RoomUsersCreateOrConnectWithoutRoomInput[]
    upsert?: RoomUsersUpsertWithWhereUniqueWithoutRoomInput | RoomUsersUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomUsersCreateManyRoomInputEnvelope
    set?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    disconnect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    delete?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    connect?: RoomUsersWhereUniqueInput | RoomUsersWhereUniqueInput[]
    update?: RoomUsersUpdateWithWhereUniqueWithoutRoomInput | RoomUsersUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomUsersUpdateManyWithWhereWithoutRoomInput | RoomUsersUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
  }

  export type InvitationsUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput> | InvitationsCreateWithoutRoomInput[] | InvitationsUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: InvitationsCreateOrConnectWithoutRoomInput | InvitationsCreateOrConnectWithoutRoomInput[]
    upsert?: InvitationsUpsertWithWhereUniqueWithoutRoomInput | InvitationsUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: InvitationsCreateManyRoomInputEnvelope
    set?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    disconnect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    delete?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    connect?: InvitationsWhereUniqueInput | InvitationsWhereUniqueInput[]
    update?: InvitationsUpdateWithWhereUniqueWithoutRoomInput | InvitationsUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: InvitationsUpdateManyWithWhereWithoutRoomInput | InvitationsUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutMessageRoomIdNestedInput = {
    create?: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput> | MessageCreateWithoutMessageRoomIdInput[] | MessageUncheckedCreateWithoutMessageRoomIdInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutMessageRoomIdInput | MessageCreateOrConnectWithoutMessageRoomIdInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutMessageRoomIdInput | MessageUpsertWithWhereUniqueWithoutMessageRoomIdInput[]
    createMany?: MessageCreateManyMessageRoomIdInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutMessageRoomIdInput | MessageUpdateWithWhereUniqueWithoutMessageRoomIdInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutMessageRoomIdInput | MessageUpdateManyWithWhereWithoutMessageRoomIdInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type RoomCreateNestedOneWithoutRoomUsersInput = {
    create?: XOR<RoomCreateWithoutRoomUsersInput, RoomUncheckedCreateWithoutRoomUsersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutRoomUsersInput
    connect?: RoomWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutRoomsInput = {
    create?: XOR<UsersCreateWithoutRoomsInput, UsersUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomsInput
    connect?: UsersWhereUniqueInput
  }

  export type RoomUpdateOneRequiredWithoutRoomUsersNestedInput = {
    create?: XOR<RoomCreateWithoutRoomUsersInput, RoomUncheckedCreateWithoutRoomUsersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutRoomUsersInput
    upsert?: RoomUpsertWithoutRoomUsersInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutRoomUsersInput, RoomUpdateWithoutRoomUsersInput>, RoomUncheckedUpdateWithoutRoomUsersInput>
  }

  export type UsersUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<UsersCreateWithoutRoomsInput, UsersUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomsInput
    upsert?: UsersUpsertWithoutRoomsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRoomsInput, UsersUpdateWithoutRoomsInput>, UsersUncheckedUpdateWithoutRoomsInput>
  }

  export type UsersCreateNestedOneWithoutRoomInvitationSenderInput = {
    create?: XOR<UsersCreateWithoutRoomInvitationSenderInput, UsersUncheckedCreateWithoutRoomInvitationSenderInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomInvitationSenderInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutRoomInvitationReceiverInput = {
    create?: XOR<UsersCreateWithoutRoomInvitationReceiverInput, UsersUncheckedCreateWithoutRoomInvitationReceiverInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomInvitationReceiverInput
    connect?: UsersWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<RoomCreateWithoutInvitationsInput, RoomUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutInvitationsInput
    connect?: RoomWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutRoomInvitationSenderNestedInput = {
    create?: XOR<UsersCreateWithoutRoomInvitationSenderInput, UsersUncheckedCreateWithoutRoomInvitationSenderInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomInvitationSenderInput
    upsert?: UsersUpsertWithoutRoomInvitationSenderInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRoomInvitationSenderInput, UsersUpdateWithoutRoomInvitationSenderInput>, UsersUncheckedUpdateWithoutRoomInvitationSenderInput>
  }

  export type UsersUpdateOneRequiredWithoutRoomInvitationReceiverNestedInput = {
    create?: XOR<UsersCreateWithoutRoomInvitationReceiverInput, UsersUncheckedCreateWithoutRoomInvitationReceiverInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRoomInvitationReceiverInput
    upsert?: UsersUpsertWithoutRoomInvitationReceiverInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRoomInvitationReceiverInput, UsersUpdateWithoutRoomInvitationReceiverInput>, UsersUncheckedUpdateWithoutRoomInvitationReceiverInput>
  }

  export type RoomUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<RoomCreateWithoutInvitationsInput, RoomUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutInvitationsInput
    upsert?: RoomUpsertWithoutInvitationsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutInvitationsInput, RoomUpdateWithoutInvitationsInput>, RoomUncheckedUpdateWithoutInvitationsInput>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UsersCreateWithoutPendingFriendReqOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutPendingFriendReqOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput>
  }

  export type UsersCreateWithoutPendingFriendReqInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutPendingFriendReqInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput>
  }

  export type UsersCreateWithoutFriendOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutFriendOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersCreateWithoutFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersCreateWithoutBlockedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutBlockedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput>
  }

  export type UsersCreateWithoutBlockedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutBlockedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput>
  }

  export type NotificationsCreateWithoutSenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.NotificationType
    read?: boolean
    mode?: string | null
    receiverUser: UsersCreateNestedOneWithoutRecNotificationInput
  }

  export type NotificationsUncheckedCreateWithoutSenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    receiverId: number
    mode?: string | null
  }

  export type NotificationsCreateOrConnectWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput>
  }

  export type NotificationsCreateManySenderUserInputEnvelope = {
    data: NotificationsCreateManySenderUserInput | NotificationsCreateManySenderUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.NotificationType
    read?: boolean
    mode?: string | null
    senderUser: UsersCreateNestedOneWithoutSenNotificationInput
  }

  export type NotificationsUncheckedCreateWithoutReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    senderId: number
    mode?: string | null
  }

  export type NotificationsCreateOrConnectWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput>
  }

  export type NotificationsCreateManyReceiverUserInputEnvelope = {
    data: NotificationsCreateManyReceiverUserInput | NotificationsCreateManyReceiverUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutUsersInput = {
    chatUsers?: ChatCreatechatUsersInput | number[]
    msgChatId?: MessageCreateNestedManyWithoutMessageChatIdInput
  }

  export type ChatUncheckedCreateWithoutUsersInput = {
    chatId?: number
    chatUsers?: ChatCreatechatUsersInput | number[]
    msgChatId?: MessageUncheckedCreateNestedManyWithoutMessageChatIdInput
  }

  export type ChatCreateOrConnectWithoutUsersInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type MessageCreateWithoutSenderIdInput = {
    textContent: string
    createdAt?: Date | string
    type: string
    messageChatId?: ChatCreateNestedOneWithoutMsgChatIdInput
    messageRoomId?: RoomCreateNestedOneWithoutMsgRoomIdInput
  }

  export type MessageUncheckedCreateWithoutSenderIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    msgChatId?: number | null
    msgRoomId?: number | null
    type: string
  }

  export type MessageCreateOrConnectWithoutSenderIdInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput>
  }

  export type MessageCreateManySenderIdInputEnvelope = {
    data: MessageCreateManySenderIdInput | MessageCreateManySenderIdInput[]
    skipDuplicates?: boolean
  }

  export type RoomUsersCreateWithoutUserInput = {
    role: string
    allowed: boolean
    room: RoomCreateNestedOneWithoutRoomUsersInput
  }

  export type RoomUsersUncheckedCreateWithoutUserInput = {
    id?: number
    roomId: number
    role: string
    allowed: boolean
  }

  export type RoomUsersCreateOrConnectWithoutUserInput = {
    where: RoomUsersWhereUniqueInput
    create: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput>
  }

  export type RoomUsersCreateManyUserInputEnvelope = {
    data: RoomUsersCreateManyUserInput | RoomUsersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvitationsCreateWithoutSenderInput = {
    status?: string
    receiver: UsersCreateNestedOneWithoutRoomInvitationReceiverInput
    room: RoomCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationsUncheckedCreateWithoutSenderInput = {
    id?: number
    status?: string
    receiverId: number
    roomId: number
  }

  export type InvitationsCreateOrConnectWithoutSenderInput = {
    where: InvitationsWhereUniqueInput
    create: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput>
  }

  export type InvitationsCreateManySenderInputEnvelope = {
    data: InvitationsCreateManySenderInput | InvitationsCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type InvitationsCreateWithoutReceiverInput = {
    status?: string
    sender: UsersCreateNestedOneWithoutRoomInvitationSenderInput
    room: RoomCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationsUncheckedCreateWithoutReceiverInput = {
    id?: number
    status?: string
    senderId: number
    roomId: number
  }

  export type InvitationsCreateOrConnectWithoutReceiverInput = {
    where: InvitationsWhereUniqueInput
    create: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput>
  }

  export type InvitationsCreateManyReceiverInputEnvelope = {
    data: InvitationsCreateManyReceiverInput | InvitationsCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    gamesPlayed?: number
    wins?: number
    loses?: number
  }

  export type GameUncheckedCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    gamesPlayed?: number
    wins?: number
    loses?: number
  }

  export type GameCreateOrConnectWithoutUserInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateWithoutMyUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    myScore: number
    oppScore: number
    oppUser: UsersCreateNestedOneWithoutOppHistoryGamesInput
  }

  export type HistoryUncheckedCreateWithoutMyUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    oppUserId: number
    myScore: number
    oppScore: number
  }

  export type HistoryCreateOrConnectWithoutMyUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput>
  }

  export type HistoryCreateManyMyUserInputEnvelope = {
    data: HistoryCreateManyMyUserInput | HistoryCreateManyMyUserInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutOppUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    myScore: number
    oppScore: number
    myUser: UsersCreateNestedOneWithoutMyHistoryGamesInput
  }

  export type HistoryUncheckedCreateWithoutOppUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    myUserId: number
    myScore: number
    oppScore: number
  }

  export type HistoryCreateOrConnectWithoutOppUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput>
  }

  export type HistoryCreateManyOppUserInputEnvelope = {
    data: HistoryCreateManyOppUserInput | HistoryCreateManyOppUserInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutPendingFriendReqOfInput, UsersUncheckedUpdateWithoutPendingFriendReqOfInput>
    create: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutPendingFriendReqOfInput, UsersUncheckedUpdateWithoutPendingFriendReqOfInput>
  }

  export type UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutPendingFriendReqOfInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twofaEmail?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
    isActive?: BoolFilter<"Users"> | boolean
    signedUp?: BoolFilter<"Users"> | boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutPendingFriendReqInput, UsersUncheckedUpdateWithoutPendingFriendReqInput>
    create: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutPendingFriendReqInput, UsersUncheckedUpdateWithoutPendingFriendReqInput>
  }

  export type UsersUpdateManyWithWhereWithoutPendingFriendReqInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutPendingFriendReqInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
  }

  export type UsersUpdateManyWithWhereWithoutFriendOfInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutFriendOfInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
  }

  export type UsersUpdateManyWithWhereWithoutFriendsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutFriendsInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutBlockedByInput, UsersUncheckedUpdateWithoutBlockedByInput>
    create: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutBlockedByInput, UsersUncheckedUpdateWithoutBlockedByInput>
  }

  export type UsersUpdateManyWithWhereWithoutBlockedByInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutBlockedByInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutBlockedInput, UsersUncheckedUpdateWithoutBlockedInput>
    create: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutBlockedInput, UsersUncheckedUpdateWithoutBlockedInput>
  }

  export type UsersUpdateManyWithWhereWithoutBlockedInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutBlockedInput>
  }

  export type NotificationsUpsertWithWhereUniqueWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutSenderUserInput, NotificationsUncheckedUpdateWithoutSenderUserInput>
    create: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutSenderUserInput, NotificationsUncheckedUpdateWithoutSenderUserInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutSenderUserInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutSenderUserInput>
  }

  export type NotificationsScalarWhereInput = {
    AND?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    OR?: NotificationsScalarWhereInput[]
    NOT?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    id?: IntFilter<"Notifications"> | number
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
    mode?: StringNullableFilter<"Notifications"> | string | null
  }

  export type NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutReceiverUserInput, NotificationsUncheckedUpdateWithoutReceiverUserInput>
    create: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutReceiverUserInput, NotificationsUncheckedUpdateWithoutReceiverUserInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutReceiverUserInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutReceiverUserInput>
  }

  export type ChatUpsertWithWhereUniqueWithoutUsersInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutUsersInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
  }

  export type ChatUpdateManyWithWhereWithoutUsersInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutUsersInput>
  }

  export type ChatScalarWhereInput = {
    AND?: ChatScalarWhereInput | ChatScalarWhereInput[]
    OR?: ChatScalarWhereInput[]
    NOT?: ChatScalarWhereInput | ChatScalarWhereInput[]
    chatId?: IntFilter<"Chat"> | number
    chatUsers?: IntNullableListFilter<"Chat">
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderIdInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderIdInput, MessageUncheckedUpdateWithoutSenderIdInput>
    create: XOR<MessageCreateWithoutSenderIdInput, MessageUncheckedCreateWithoutSenderIdInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderIdInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderIdInput, MessageUncheckedUpdateWithoutSenderIdInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderIdInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderIdInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    messageId?: IntFilter<"Message"> | number
    textContent?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    MessageSenId?: IntFilter<"Message"> | number
    msgChatId?: IntNullableFilter<"Message"> | number | null
    msgRoomId?: IntNullableFilter<"Message"> | number | null
    type?: StringFilter<"Message"> | string
  }

  export type RoomUsersUpsertWithWhereUniqueWithoutUserInput = {
    where: RoomUsersWhereUniqueInput
    update: XOR<RoomUsersUpdateWithoutUserInput, RoomUsersUncheckedUpdateWithoutUserInput>
    create: XOR<RoomUsersCreateWithoutUserInput, RoomUsersUncheckedCreateWithoutUserInput>
  }

  export type RoomUsersUpdateWithWhereUniqueWithoutUserInput = {
    where: RoomUsersWhereUniqueInput
    data: XOR<RoomUsersUpdateWithoutUserInput, RoomUsersUncheckedUpdateWithoutUserInput>
  }

  export type RoomUsersUpdateManyWithWhereWithoutUserInput = {
    where: RoomUsersScalarWhereInput
    data: XOR<RoomUsersUpdateManyMutationInput, RoomUsersUncheckedUpdateManyWithoutUserInput>
  }

  export type RoomUsersScalarWhereInput = {
    AND?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
    OR?: RoomUsersScalarWhereInput[]
    NOT?: RoomUsersScalarWhereInput | RoomUsersScalarWhereInput[]
    id?: IntFilter<"RoomUsers"> | number
    roomId?: IntFilter<"RoomUsers"> | number
    userId?: IntFilter<"RoomUsers"> | number
    role?: StringFilter<"RoomUsers"> | string
    allowed?: BoolFilter<"RoomUsers"> | boolean
  }

  export type InvitationsUpsertWithWhereUniqueWithoutSenderInput = {
    where: InvitationsWhereUniqueInput
    update: XOR<InvitationsUpdateWithoutSenderInput, InvitationsUncheckedUpdateWithoutSenderInput>
    create: XOR<InvitationsCreateWithoutSenderInput, InvitationsUncheckedCreateWithoutSenderInput>
  }

  export type InvitationsUpdateWithWhereUniqueWithoutSenderInput = {
    where: InvitationsWhereUniqueInput
    data: XOR<InvitationsUpdateWithoutSenderInput, InvitationsUncheckedUpdateWithoutSenderInput>
  }

  export type InvitationsUpdateManyWithWhereWithoutSenderInput = {
    where: InvitationsScalarWhereInput
    data: XOR<InvitationsUpdateManyMutationInput, InvitationsUncheckedUpdateManyWithoutSenderInput>
  }

  export type InvitationsScalarWhereInput = {
    AND?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
    OR?: InvitationsScalarWhereInput[]
    NOT?: InvitationsScalarWhereInput | InvitationsScalarWhereInput[]
    id?: IntFilter<"Invitations"> | number
    status?: StringFilter<"Invitations"> | string
    senderId?: IntFilter<"Invitations"> | number
    receiverId?: IntFilter<"Invitations"> | number
    roomId?: IntFilter<"Invitations"> | number
  }

  export type InvitationsUpsertWithWhereUniqueWithoutReceiverInput = {
    where: InvitationsWhereUniqueInput
    update: XOR<InvitationsUpdateWithoutReceiverInput, InvitationsUncheckedUpdateWithoutReceiverInput>
    create: XOR<InvitationsCreateWithoutReceiverInput, InvitationsUncheckedCreateWithoutReceiverInput>
  }

  export type InvitationsUpdateWithWhereUniqueWithoutReceiverInput = {
    where: InvitationsWhereUniqueInput
    data: XOR<InvitationsUpdateWithoutReceiverInput, InvitationsUncheckedUpdateWithoutReceiverInput>
  }

  export type InvitationsUpdateManyWithWhereWithoutReceiverInput = {
    where: InvitationsScalarWhereInput
    data: XOR<InvitationsUpdateManyMutationInput, InvitationsUncheckedUpdateManyWithoutReceiverInput>
  }

  export type GameUpsertWithoutUserInput = {
    update: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutUserInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
  }

  export type GameUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
  }

  export type GameUncheckedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    gamesPlayed?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUpsertWithWhereUniqueWithoutMyUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutMyUserInput, HistoryUncheckedUpdateWithoutMyUserInput>
    create: XOR<HistoryCreateWithoutMyUserInput, HistoryUncheckedCreateWithoutMyUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutMyUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutMyUserInput, HistoryUncheckedUpdateWithoutMyUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutMyUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutMyUserInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    OR?: HistoryScalarWhereInput[]
    NOT?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
    id?: IntFilter<"History"> | number
    myUserId?: IntFilter<"History"> | number
    oppUserId?: IntFilter<"History"> | number
    myScore?: IntFilter<"History"> | number
    oppScore?: IntFilter<"History"> | number
  }

  export type HistoryUpsertWithWhereUniqueWithoutOppUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutOppUserInput, HistoryUncheckedUpdateWithoutOppUserInput>
    create: XOR<HistoryCreateWithoutOppUserInput, HistoryUncheckedCreateWithoutOppUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutOppUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutOppUserInput, HistoryUncheckedUpdateWithoutOppUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutOppUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutOppUserInput>
  }

  export type UsersCreateWithoutGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutGamesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutGamesInput, UsersUncheckedCreateWithoutGamesInput>
  }

  export type UsersUpsertWithoutGamesInput = {
    update: XOR<UsersUpdateWithoutGamesInput, UsersUncheckedUpdateWithoutGamesInput>
    create: XOR<UsersCreateWithoutGamesInput, UsersUncheckedCreateWithoutGamesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutGamesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutGamesInput, UsersUncheckedUpdateWithoutGamesInput>
  }

  export type UsersUpdateWithoutGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersCreateWithoutMyHistoryGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutMyHistoryGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutMyHistoryGamesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMyHistoryGamesInput, UsersUncheckedCreateWithoutMyHistoryGamesInput>
  }

  export type UsersCreateWithoutOppHistoryGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
  }

  export type UsersUncheckedCreateWithoutOppHistoryGamesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
  }

  export type UsersCreateOrConnectWithoutOppHistoryGamesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutOppHistoryGamesInput, UsersUncheckedCreateWithoutOppHistoryGamesInput>
  }

  export type UsersUpsertWithoutMyHistoryGamesInput = {
    update: XOR<UsersUpdateWithoutMyHistoryGamesInput, UsersUncheckedUpdateWithoutMyHistoryGamesInput>
    create: XOR<UsersCreateWithoutMyHistoryGamesInput, UsersUncheckedCreateWithoutMyHistoryGamesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMyHistoryGamesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMyHistoryGamesInput, UsersUncheckedUpdateWithoutMyHistoryGamesInput>
  }

  export type UsersUpdateWithoutMyHistoryGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMyHistoryGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUpsertWithoutOppHistoryGamesInput = {
    update: XOR<UsersUpdateWithoutOppHistoryGamesInput, UsersUncheckedUpdateWithoutOppHistoryGamesInput>
    create: XOR<UsersCreateWithoutOppHistoryGamesInput, UsersUncheckedCreateWithoutOppHistoryGamesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutOppHistoryGamesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutOppHistoryGamesInput, UsersUncheckedUpdateWithoutOppHistoryGamesInput>
  }

  export type UsersUpdateWithoutOppHistoryGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutOppHistoryGamesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
  }

  export type UsersCreateWithoutSenNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutSenNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutSenNotificationInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
  }

  export type UsersCreateWithoutRecNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutRecNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutRecNotificationInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
  }

  export type UsersUpsertWithoutSenNotificationInput = {
    update: XOR<UsersUpdateWithoutSenNotificationInput, UsersUncheckedUpdateWithoutSenNotificationInput>
    create: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSenNotificationInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSenNotificationInput, UsersUncheckedUpdateWithoutSenNotificationInput>
  }

  export type UsersUpdateWithoutSenNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSenNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUpsertWithoutRecNotificationInput = {
    update: XOR<UsersUpdateWithoutRecNotificationInput, UsersUncheckedUpdateWithoutRecNotificationInput>
    create: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRecNotificationInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRecNotificationInput, UsersUncheckedUpdateWithoutRecNotificationInput>
  }

  export type UsersUpdateWithoutRecNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRecNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersCreateWithoutChatInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutChatInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutChatInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateWithoutMessageChatIdInput = {
    textContent: string
    createdAt?: Date | string
    type: string
    senderId: UsersCreateNestedOneWithoutMessageSenIdInput
    messageRoomId?: RoomCreateNestedOneWithoutMsgRoomIdInput
  }

  export type MessageUncheckedCreateWithoutMessageChatIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgRoomId?: number | null
    type: string
  }

  export type MessageCreateOrConnectWithoutMessageChatIdInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput>
  }

  export type MessageCreateManyMessageChatIdInputEnvelope = {
    data: MessageCreateManyMessageChatIdInput | MessageCreateManyMessageChatIdInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutChatInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutChatInput, UsersUncheckedUpdateWithoutChatInput>
    create: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutChatInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutChatInput, UsersUncheckedUpdateWithoutChatInput>
  }

  export type UsersUpdateManyWithWhereWithoutChatInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutChatInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutMessageChatIdInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutMessageChatIdInput, MessageUncheckedUpdateWithoutMessageChatIdInput>
    create: XOR<MessageCreateWithoutMessageChatIdInput, MessageUncheckedCreateWithoutMessageChatIdInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutMessageChatIdInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutMessageChatIdInput, MessageUncheckedUpdateWithoutMessageChatIdInput>
  }

  export type MessageUpdateManyWithWhereWithoutMessageChatIdInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessageChatIdInput>
  }

  export type UsersCreateWithoutMessageSenIdInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutMessageSenIdInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutMessageSenIdInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMessageSenIdInput, UsersUncheckedCreateWithoutMessageSenIdInput>
  }

  export type ChatCreateWithoutMsgChatIdInput = {
    chatUsers?: ChatCreatechatUsersInput | number[]
    users?: UsersCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMsgChatIdInput = {
    chatId?: number
    chatUsers?: ChatCreatechatUsersInput | number[]
    users?: UsersUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutMsgChatIdInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMsgChatIdInput, ChatUncheckedCreateWithoutMsgChatIdInput>
  }

  export type RoomCreateWithoutMsgRoomIdInput = {
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersCreateNestedManyWithoutRoomInput
    invitations?: InvitationsCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutMsgRoomIdInput = {
    id?: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersUncheckedCreateNestedManyWithoutRoomInput
    invitations?: InvitationsUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutMsgRoomIdInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutMsgRoomIdInput, RoomUncheckedCreateWithoutMsgRoomIdInput>
  }

  export type UsersUpsertWithoutMessageSenIdInput = {
    update: XOR<UsersUpdateWithoutMessageSenIdInput, UsersUncheckedUpdateWithoutMessageSenIdInput>
    create: XOR<UsersCreateWithoutMessageSenIdInput, UsersUncheckedCreateWithoutMessageSenIdInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMessageSenIdInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMessageSenIdInput, UsersUncheckedUpdateWithoutMessageSenIdInput>
  }

  export type UsersUpdateWithoutMessageSenIdInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMessageSenIdInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type ChatUpsertWithoutMsgChatIdInput = {
    update: XOR<ChatUpdateWithoutMsgChatIdInput, ChatUncheckedUpdateWithoutMsgChatIdInput>
    create: XOR<ChatCreateWithoutMsgChatIdInput, ChatUncheckedCreateWithoutMsgChatIdInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutMsgChatIdInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutMsgChatIdInput, ChatUncheckedUpdateWithoutMsgChatIdInput>
  }

  export type ChatUpdateWithoutMsgChatIdInput = {
    chatUsers?: ChatUpdatechatUsersInput | number[]
    users?: UsersUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMsgChatIdInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    chatUsers?: ChatUpdatechatUsersInput | number[]
    users?: UsersUncheckedUpdateManyWithoutChatNestedInput
  }

  export type RoomUpsertWithoutMsgRoomIdInput = {
    update: XOR<RoomUpdateWithoutMsgRoomIdInput, RoomUncheckedUpdateWithoutMsgRoomIdInput>
    create: XOR<RoomCreateWithoutMsgRoomIdInput, RoomUncheckedCreateWithoutMsgRoomIdInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutMsgRoomIdInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutMsgRoomIdInput, RoomUncheckedUpdateWithoutMsgRoomIdInput>
  }

  export type RoomUpdateWithoutMsgRoomIdInput = {
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUpdateManyWithoutRoomNestedInput
    invitations?: InvitationsUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutMsgRoomIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUncheckedUpdateManyWithoutRoomNestedInput
    invitations?: InvitationsUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUsersCreateWithoutRoomInput = {
    role: string
    allowed: boolean
    user: UsersCreateNestedOneWithoutRoomsInput
  }

  export type RoomUsersUncheckedCreateWithoutRoomInput = {
    id?: number
    userId: number
    role: string
    allowed: boolean
  }

  export type RoomUsersCreateOrConnectWithoutRoomInput = {
    where: RoomUsersWhereUniqueInput
    create: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput>
  }

  export type RoomUsersCreateManyRoomInputEnvelope = {
    data: RoomUsersCreateManyRoomInput | RoomUsersCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type InvitationsCreateWithoutRoomInput = {
    status?: string
    sender: UsersCreateNestedOneWithoutRoomInvitationSenderInput
    receiver: UsersCreateNestedOneWithoutRoomInvitationReceiverInput
  }

  export type InvitationsUncheckedCreateWithoutRoomInput = {
    id?: number
    status?: string
    senderId: number
    receiverId: number
  }

  export type InvitationsCreateOrConnectWithoutRoomInput = {
    where: InvitationsWhereUniqueInput
    create: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput>
  }

  export type InvitationsCreateManyRoomInputEnvelope = {
    data: InvitationsCreateManyRoomInput | InvitationsCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutMessageRoomIdInput = {
    textContent: string
    createdAt?: Date | string
    type: string
    senderId: UsersCreateNestedOneWithoutMessageSenIdInput
    messageChatId?: ChatCreateNestedOneWithoutMsgChatIdInput
  }

  export type MessageUncheckedCreateWithoutMessageRoomIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgChatId?: number | null
    type: string
  }

  export type MessageCreateOrConnectWithoutMessageRoomIdInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput>
  }

  export type MessageCreateManyMessageRoomIdInputEnvelope = {
    data: MessageCreateManyMessageRoomIdInput | MessageCreateManyMessageRoomIdInput[]
    skipDuplicates?: boolean
  }

  export type RoomUsersUpsertWithWhereUniqueWithoutRoomInput = {
    where: RoomUsersWhereUniqueInput
    update: XOR<RoomUsersUpdateWithoutRoomInput, RoomUsersUncheckedUpdateWithoutRoomInput>
    create: XOR<RoomUsersCreateWithoutRoomInput, RoomUsersUncheckedCreateWithoutRoomInput>
  }

  export type RoomUsersUpdateWithWhereUniqueWithoutRoomInput = {
    where: RoomUsersWhereUniqueInput
    data: XOR<RoomUsersUpdateWithoutRoomInput, RoomUsersUncheckedUpdateWithoutRoomInput>
  }

  export type RoomUsersUpdateManyWithWhereWithoutRoomInput = {
    where: RoomUsersScalarWhereInput
    data: XOR<RoomUsersUpdateManyMutationInput, RoomUsersUncheckedUpdateManyWithoutRoomInput>
  }

  export type InvitationsUpsertWithWhereUniqueWithoutRoomInput = {
    where: InvitationsWhereUniqueInput
    update: XOR<InvitationsUpdateWithoutRoomInput, InvitationsUncheckedUpdateWithoutRoomInput>
    create: XOR<InvitationsCreateWithoutRoomInput, InvitationsUncheckedCreateWithoutRoomInput>
  }

  export type InvitationsUpdateWithWhereUniqueWithoutRoomInput = {
    where: InvitationsWhereUniqueInput
    data: XOR<InvitationsUpdateWithoutRoomInput, InvitationsUncheckedUpdateWithoutRoomInput>
  }

  export type InvitationsUpdateManyWithWhereWithoutRoomInput = {
    where: InvitationsScalarWhereInput
    data: XOR<InvitationsUpdateManyMutationInput, InvitationsUncheckedUpdateManyWithoutRoomInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutMessageRoomIdInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutMessageRoomIdInput, MessageUncheckedUpdateWithoutMessageRoomIdInput>
    create: XOR<MessageCreateWithoutMessageRoomIdInput, MessageUncheckedCreateWithoutMessageRoomIdInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutMessageRoomIdInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutMessageRoomIdInput, MessageUncheckedUpdateWithoutMessageRoomIdInput>
  }

  export type MessageUpdateManyWithWhereWithoutMessageRoomIdInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessageRoomIdInput>
  }

  export type RoomCreateWithoutRoomUsersInput = {
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    invitations?: InvitationsCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomUncheckedCreateWithoutRoomUsersInput = {
    id?: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    invitations?: InvitationsUncheckedCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageUncheckedCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomCreateOrConnectWithoutRoomUsersInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutRoomUsersInput, RoomUncheckedCreateWithoutRoomUsersInput>
  }

  export type UsersCreateWithoutRoomsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutRoomsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutRoomsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoomsInput, UsersUncheckedCreateWithoutRoomsInput>
  }

  export type RoomUpsertWithoutRoomUsersInput = {
    update: XOR<RoomUpdateWithoutRoomUsersInput, RoomUncheckedUpdateWithoutRoomUsersInput>
    create: XOR<RoomCreateWithoutRoomUsersInput, RoomUncheckedCreateWithoutRoomUsersInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutRoomUsersInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutRoomUsersInput, RoomUncheckedUpdateWithoutRoomUsersInput>
  }

  export type RoomUpdateWithoutRoomUsersInput = {
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: InvitationsUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type RoomUncheckedUpdateWithoutRoomUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    invitations?: InvitationsUncheckedUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUncheckedUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type UsersUpsertWithoutRoomsInput = {
    update: XOR<UsersUpdateWithoutRoomsInput, UsersUncheckedUpdateWithoutRoomsInput>
    create: XOR<UsersCreateWithoutRoomsInput, UsersUncheckedCreateWithoutRoomsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRoomsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRoomsInput, UsersUncheckedUpdateWithoutRoomsInput>
  }

  export type UsersUpdateWithoutRoomsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRoomsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersCreateWithoutRoomInvitationSenderInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationReceiver?: InvitationsCreateNestedManyWithoutReceiverInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutRoomInvitationSenderInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationReceiver?: InvitationsUncheckedCreateNestedManyWithoutReceiverInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutRoomInvitationSenderInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoomInvitationSenderInput, UsersUncheckedCreateWithoutRoomInvitationSenderInput>
  }

  export type UsersCreateWithoutRoomInvitationReceiverInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
    chat?: ChatCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsCreateNestedManyWithoutSenderInput
    games?: GameCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryCreateNestedManyWithoutOppUserInput
  }

  export type UsersUncheckedCreateWithoutRoomInvitationReceiverInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    userStatus?: $Enums.userStatus
    isActive?: boolean
    signedUp?: boolean
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUsersInput
    MessageSenId?: MessageUncheckedCreateNestedManyWithoutSenderIdInput
    rooms?: RoomUsersUncheckedCreateNestedManyWithoutUserInput
    roomInvitationSender?: InvitationsUncheckedCreateNestedManyWithoutSenderInput
    games?: GameUncheckedCreateNestedOneWithoutUserInput
    myHistoryGames?: HistoryUncheckedCreateNestedManyWithoutMyUserInput
    oppHistoryGames?: HistoryUncheckedCreateNestedManyWithoutOppUserInput
  }

  export type UsersCreateOrConnectWithoutRoomInvitationReceiverInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRoomInvitationReceiverInput, UsersUncheckedCreateWithoutRoomInvitationReceiverInput>
  }

  export type RoomCreateWithoutInvitationsInput = {
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomUncheckedCreateWithoutInvitationsInput = {
    id?: number
    roomName: string
    roomAvatar: string
    roomType: string
    roomPass?: string | null
    roomUsers?: RoomUsersUncheckedCreateNestedManyWithoutRoomInput
    msgRoomId?: MessageUncheckedCreateNestedManyWithoutMessageRoomIdInput
  }

  export type RoomCreateOrConnectWithoutInvitationsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutInvitationsInput, RoomUncheckedCreateWithoutInvitationsInput>
  }

  export type UsersUpsertWithoutRoomInvitationSenderInput = {
    update: XOR<UsersUpdateWithoutRoomInvitationSenderInput, UsersUncheckedUpdateWithoutRoomInvitationSenderInput>
    create: XOR<UsersCreateWithoutRoomInvitationSenderInput, UsersUncheckedCreateWithoutRoomInvitationSenderInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRoomInvitationSenderInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRoomInvitationSenderInput, UsersUncheckedUpdateWithoutRoomInvitationSenderInput>
  }

  export type UsersUpdateWithoutRoomInvitationSenderInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRoomInvitationSenderInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUpsertWithoutRoomInvitationReceiverInput = {
    update: XOR<UsersUpdateWithoutRoomInvitationReceiverInput, UsersUncheckedUpdateWithoutRoomInvitationReceiverInput>
    create: XOR<UsersCreateWithoutRoomInvitationReceiverInput, UsersUncheckedCreateWithoutRoomInvitationReceiverInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRoomInvitationReceiverInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRoomInvitationReceiverInput, UsersUncheckedUpdateWithoutRoomInvitationReceiverInput>
  }

  export type UsersUpdateWithoutRoomInvitationReceiverInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRoomInvitationReceiverInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type RoomUpsertWithoutInvitationsInput = {
    update: XOR<RoomUpdateWithoutInvitationsInput, RoomUncheckedUpdateWithoutInvitationsInput>
    create: XOR<RoomCreateWithoutInvitationsInput, RoomUncheckedCreateWithoutInvitationsInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutInvitationsInput, RoomUncheckedUpdateWithoutInvitationsInput>
  }

  export type RoomUpdateWithoutInvitationsInput = {
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type RoomUncheckedUpdateWithoutInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
    roomAvatar?: StringFieldUpdateOperationsInput | string
    roomType?: StringFieldUpdateOperationsInput | string
    roomPass?: NullableStringFieldUpdateOperationsInput | string | null
    roomUsers?: RoomUsersUncheckedUpdateManyWithoutRoomNestedInput
    msgRoomId?: MessageUncheckedUpdateManyWithoutMessageRoomIdNestedInput
  }

  export type NotificationsCreateManySenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    receiverId: number
    mode?: string | null
  }

  export type NotificationsCreateManyReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    type: $Enums.NotificationType
    read?: boolean
    senderId: number
    mode?: string | null
  }

  export type MessageCreateManySenderIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    msgChatId?: number | null
    msgRoomId?: number | null
    type: string
  }

  export type RoomUsersCreateManyUserInput = {
    id?: number
    roomId: number
    role: string
    allowed: boolean
  }

  export type InvitationsCreateManySenderInput = {
    id?: number
    status?: string
    receiverId: number
    roomId: number
  }

  export type InvitationsCreateManyReceiverInput = {
    id?: number
    status?: string
    senderId: number
    roomId: number
  }

  export type HistoryCreateManyMyUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    oppUserId: number
    myScore: number
    oppScore: number
  }

  export type HistoryCreateManyOppUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    myUserId: number
    myScore: number
    oppScore: number
  }

  export type UsersUpdateWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUpdateWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUpdateWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUpdateWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUpdateWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUpdateWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUsersNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationsUpdateWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    mode?: NullableStringFieldUpdateOperationsInput | string | null
    receiverUser?: UsersUpdateOneRequiredWithoutRecNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    receiverId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUncheckedUpdateManyWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    receiverId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUpdateWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    mode?: NullableStringFieldUpdateOperationsInput | string | null
    senderUser?: UsersUpdateOneRequiredWithoutSenNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUncheckedUpdateManyWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    mode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatUpdateWithoutUsersInput = {
    chatUsers?: ChatUpdatechatUsersInput | number[]
    msgChatId?: MessageUpdateManyWithoutMessageChatIdNestedInput
  }

  export type ChatUncheckedUpdateWithoutUsersInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    chatUsers?: ChatUpdatechatUsersInput | number[]
    msgChatId?: MessageUncheckedUpdateManyWithoutMessageChatIdNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutUsersInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    chatUsers?: ChatUpdatechatUsersInput | number[]
  }

  export type MessageUpdateWithoutSenderIdInput = {
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    messageChatId?: ChatUpdateOneWithoutMsgChatIdNestedInput
    messageRoomId?: RoomUpdateOneWithoutMsgRoomIdNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUsersUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutRoomUsersNestedInput
  }

  export type RoomUsersUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUsersUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationsUpdateWithoutSenderInput = {
    status?: StringFieldUpdateOperationsInput | string
    receiver?: UsersUpdateOneRequiredWithoutRoomInvitationReceiverNestedInput
    room?: RoomUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationsUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationsUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationsUpdateWithoutReceiverInput = {
    status?: StringFieldUpdateOperationsInput | string
    sender?: UsersUpdateOneRequiredWithoutRoomInvitationSenderNestedInput
    room?: RoomUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationsUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationsUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUpdateWithoutMyUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
    oppUser?: UsersUpdateOneRequiredWithoutOppHistoryGamesNestedInput
  }

  export type HistoryUncheckedUpdateWithoutMyUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    oppUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUncheckedUpdateManyWithoutMyUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    oppUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUpdateWithoutOppUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
    myUser?: UsersUpdateOneRequiredWithoutMyHistoryGamesNestedInput
  }

  export type HistoryUncheckedUpdateWithoutOppUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    myUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUncheckedUpdateManyWithoutOppUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    myUserId?: IntFieldUpdateOperationsInput | number
    myScore?: IntFieldUpdateOperationsInput | number
    oppScore?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyMessageChatIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgRoomId?: number | null
    type: string
  }

  export type UsersUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
    MessageSenId?: MessageUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUpdateManyWithoutReceiverNestedInput
    games?: GameUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
    MessageSenId?: MessageUncheckedUpdateManyWithoutSenderIdNestedInput
    rooms?: RoomUsersUncheckedUpdateManyWithoutUserNestedInput
    roomInvitationSender?: InvitationsUncheckedUpdateManyWithoutSenderNestedInput
    roomInvitationReceiver?: InvitationsUncheckedUpdateManyWithoutReceiverNestedInput
    games?: GameUncheckedUpdateOneWithoutUserNestedInput
    myHistoryGames?: HistoryUncheckedUpdateManyWithoutMyUserNestedInput
    oppHistoryGames?: HistoryUncheckedUpdateManyWithoutOppUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signedUp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutMessageChatIdInput = {
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    senderId?: UsersUpdateOneRequiredWithoutMessageSenIdNestedInput
    messageRoomId?: RoomUpdateOneWithoutMsgRoomIdNestedInput
  }

  export type MessageUncheckedUpdateWithoutMessageChatIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutMessageChatIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUsersCreateManyRoomInput = {
    id?: number
    userId: number
    role: string
    allowed: boolean
  }

  export type InvitationsCreateManyRoomInput = {
    id?: number
    status?: string
    senderId: number
    receiverId: number
  }

  export type MessageCreateManyMessageRoomIdInput = {
    messageId?: number
    textContent: string
    createdAt?: Date | string
    MessageSenId: number
    msgChatId?: number | null
    type: string
  }

  export type RoomUsersUpdateWithoutRoomInput = {
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
    user?: UsersUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type RoomUsersUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomUsersUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    allowed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationsUpdateWithoutRoomInput = {
    status?: StringFieldUpdateOperationsInput | string
    sender?: UsersUpdateOneRequiredWithoutRoomInvitationSenderNestedInput
    receiver?: UsersUpdateOneRequiredWithoutRoomInvitationReceiverNestedInput
  }

  export type InvitationsUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationsUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutMessageRoomIdInput = {
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    senderId?: UsersUpdateOneRequiredWithoutMessageSenIdNestedInput
    messageChatId?: ChatUpdateOneWithoutMsgChatIdNestedInput
  }

  export type MessageUncheckedUpdateWithoutMessageRoomIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyWithoutMessageRoomIdInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    textContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MessageSenId?: IntFieldUpdateOperationsInput | number
    msgChatId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatCountOutputTypeDefaultArgs instead
     */
    export type ChatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomCountOutputTypeDefaultArgs instead
     */
    export type RoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameDefaultArgs instead
     */
    export type GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoryDefaultArgs instead
     */
    export type HistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationsDefaultArgs instead
     */
    export type NotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatDefaultArgs instead
     */
    export type ChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomDefaultArgs instead
     */
    export type RoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomUsersDefaultArgs instead
     */
    export type RoomUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomUsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvitationsDefaultArgs instead
     */
    export type InvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvitationsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}