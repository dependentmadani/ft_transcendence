
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Notifications
 * 
 */
export type Notifications = $Result.DefaultSelection<Prisma.$NotificationsPayload>
/**
 * Model Chat
 * 
 */
export type Chat = $Result.DefaultSelection<Prisma.$ChatPayload>
/**
 * Model Messages
 * 
 */
export type Messages = $Result.DefaultSelection<Prisma.$MessagesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const userStatus: {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  INGAME: 'INGAME'
};

export type userStatus = (typeof userStatus)[keyof typeof userStatus]


export const NotificationType: {
  INFO: 'INFO',
  MESSAGE: 'MESSAGE',
  FRIEND: 'FRIEND',
  GAME: 'GAME'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type userStatus = $Enums.userStatus

export const userStatus: typeof $Enums.userStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **Notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.NotificationsDelegate<ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **Messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.MessagesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.0
   * Query Engine version: a9b7003df90aa623086e4d6f4e43c72468e6339b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Notifications: 'Notifications',
    Chat: 'Chat',
    Messages: 'Messages'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'notifications' | 'chat' | 'messages'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Notifications: {
        payload: Prisma.$NotificationsPayload<ExtArgs>
        fields: Prisma.NotificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findFirst: {
            args: Prisma.NotificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findMany: {
            args: Prisma.NotificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>[]
          }
          create: {
            args: Prisma.NotificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          createMany: {
            args: Prisma.NotificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          update: {
            args: Prisma.NotificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.NotificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: Prisma.$ChatPayload<ExtArgs>
        fields: Prisma.ChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Messages: {
        payload: Prisma.$MessagesPayload<ExtArgs>
        fields: Prisma.MessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findFirst: {
            args: Prisma.MessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findMany: {
            args: Prisma.MessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>[]
          }
          create: {
            args: Prisma.MessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          createMany: {
            args: Prisma.MessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          update: {
            args: Prisma.MessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          deleteMany: {
            args: Prisma.MessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.MessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    pendingFriendReq: number
    pendingFriendReqOf: number
    friends: number
    friendOf: number
    blocked: number
    blockedBy: number
    chat: number
    senNotification: number
    recNotification: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    pendingFriendReq?: boolean | UsersCountOutputTypeCountPendingFriendReqArgs
    pendingFriendReqOf?: boolean | UsersCountOutputTypeCountPendingFriendReqOfArgs
    friends?: boolean | UsersCountOutputTypeCountFriendsArgs
    friendOf?: boolean | UsersCountOutputTypeCountFriendOfArgs
    blocked?: boolean | UsersCountOutputTypeCountBlockedArgs
    blockedBy?: boolean | UsersCountOutputTypeCountBlockedByArgs
    chat?: boolean | UsersCountOutputTypeCountChatArgs
    senNotification?: boolean | UsersCountOutputTypeCountSenNotificationArgs
    recNotification?: boolean | UsersCountOutputTypeCountRecNotificationArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPendingFriendReqArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPendingFriendReqOfArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFriendsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFriendOfArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBlockedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBlockedByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountChatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSenNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRecNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }



  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    message: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    message?: boolean | ChatCountOutputTypeCountMessageArgs
  }

  // Custom InputTypes

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean | null
    isActive: boolean | null
    userStatus: $Enums.userStatus | null
  }

  export type UsersMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean | null
    isActive: boolean | null
    userStatus: $Enums.userStatus | null
  }

  export type UsersCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    username: number
    email: number
    password: number
    avatar: number
    hashRt: number
    twofa: number
    twofaEmail: number
    twoEnabled: number
    isActive: number
    userStatus: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    isActive?: true
    userStatus?: true
  }

  export type UsersMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    isActive?: true
    userStatus?: true
  }

  export type UsersCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    username?: true
    email?: true
    password?: true
    avatar?: true
    hashRt?: true
    twofa?: true
    twofaEmail?: true
    twoEnabled?: true
    isActive?: true
    userStatus?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    username: string
    email: string
    password: string | null
    avatar: string | null
    hashRt: string | null
    twofa: string | null
    twofaEmail: string | null
    twoEnabled: boolean
    isActive: boolean
    userStatus: $Enums.userStatus
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    hashRt?: boolean
    twofa?: boolean
    twofaEmail?: boolean
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: boolean
    pendingFriendReq?: boolean | Users$pendingFriendReqArgs<ExtArgs>
    pendingFriendReqOf?: boolean | Users$pendingFriendReqOfArgs<ExtArgs>
    friends?: boolean | Users$friendsArgs<ExtArgs>
    friendOf?: boolean | Users$friendOfArgs<ExtArgs>
    blocked?: boolean | Users$blockedArgs<ExtArgs>
    blockedBy?: boolean | Users$blockedByArgs<ExtArgs>
    chat?: boolean | Users$chatArgs<ExtArgs>
    senNotification?: boolean | Users$senNotificationArgs<ExtArgs>
    recNotification?: boolean | Users$recNotificationArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    hashRt?: boolean
    twofa?: boolean
    twofaEmail?: boolean
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    pendingFriendReq?: boolean | Users$pendingFriendReqArgs<ExtArgs>
    pendingFriendReqOf?: boolean | Users$pendingFriendReqOfArgs<ExtArgs>
    friends?: boolean | Users$friendsArgs<ExtArgs>
    friendOf?: boolean | Users$friendOfArgs<ExtArgs>
    blocked?: boolean | Users$blockedArgs<ExtArgs>
    blockedBy?: boolean | Users$blockedByArgs<ExtArgs>
    chat?: boolean | Users$chatArgs<ExtArgs>
    senNotification?: boolean | Users$senNotificationArgs<ExtArgs>
    recNotification?: boolean | Users$recNotificationArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      pendingFriendReq: Prisma.$UsersPayload<ExtArgs>[]
      pendingFriendReqOf: Prisma.$UsersPayload<ExtArgs>[]
      friends: Prisma.$UsersPayload<ExtArgs>[]
      friendOf: Prisma.$UsersPayload<ExtArgs>[]
      blocked: Prisma.$UsersPayload<ExtArgs>[]
      blockedBy: Prisma.$UsersPayload<ExtArgs>[]
      chat: Prisma.$ChatPayload<ExtArgs>[]
      senNotification: Prisma.$NotificationsPayload<ExtArgs>[]
      recNotification: Prisma.$NotificationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      username: string
      email: string
      password: string | null
      avatar: string | null
      hashRt: string | null
      twofa: string | null
      twofaEmail: string | null
      twoEnabled: boolean
      isActive: boolean
      userStatus: $Enums.userStatus
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const usersWithCreatedAtOnly = await prisma.users.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pendingFriendReq<T extends Users$pendingFriendReqArgs<ExtArgs> = {}>(args?: Subset<T, Users$pendingFriendReqArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    pendingFriendReqOf<T extends Users$pendingFriendReqOfArgs<ExtArgs> = {}>(args?: Subset<T, Users$pendingFriendReqOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    friends<T extends Users$friendsArgs<ExtArgs> = {}>(args?: Subset<T, Users$friendsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    friendOf<T extends Users$friendOfArgs<ExtArgs> = {}>(args?: Subset<T, Users$friendOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    blocked<T extends Users$blockedArgs<ExtArgs> = {}>(args?: Subset<T, Users$blockedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    blockedBy<T extends Users$blockedByArgs<ExtArgs> = {}>(args?: Subset<T, Users$blockedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    chat<T extends Users$chatArgs<ExtArgs> = {}>(args?: Subset<T, Users$chatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findMany'> | Null>;

    senNotification<T extends Users$senNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Users$senNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    recNotification<T extends Users$recNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Users$recNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly id: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly avatar: FieldRef<"Users", 'String'>
    readonly hashRt: FieldRef<"Users", 'String'>
    readonly twofa: FieldRef<"Users", 'String'>
    readonly twofaEmail: FieldRef<"Users", 'String'>
    readonly twoEnabled: FieldRef<"Users", 'Boolean'>
    readonly isActive: FieldRef<"Users", 'Boolean'>
    readonly userStatus: FieldRef<"Users", 'userStatus'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.pendingFriendReq
   */
  export type Users$pendingFriendReqArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.pendingFriendReqOf
   */
  export type Users$pendingFriendReqOfArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.friends
   */
  export type Users$friendsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.friendOf
   */
  export type Users$friendOfArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.blocked
   */
  export type Users$blockedArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.blockedBy
   */
  export type Users$blockedByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users.chat
   */
  export type Users$chatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Users.senNotification
   */
  export type Users$senNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Users.recNotification
   */
  export type Users$recNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    title: string | null
    description: string | null
    icon: string | null
    type: $Enums.NotificationType | null
    read: boolean | null
    socketId: string | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    title: string | null
    description: string | null
    icon: string | null
    type: $Enums.NotificationType | null
    read: boolean | null
    socketId: string | null
    senderId: number | null
    receiverId: number | null
  }

  export type NotificationsCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    title: number
    description: number
    icon: number
    type: number
    read: number
    socketId: number
    senderId: number
    receiverId: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    title?: true
    description?: true
    icon?: true
    type?: true
    read?: true
    socketId?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    title?: true
    description?: true
    icon?: true
    type?: true
    read?: true
    socketId?: true
    senderId?: true
    receiverId?: true
  }

  export type NotificationsCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    title?: true
    description?: true
    icon?: true
    type?: true
    read?: true
    socketId?: true
    senderId?: true
    receiverId?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to aggregate.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithAggregationInput | NotificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: NotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    title: string
    description: string | null
    icon: string | null
    type: $Enums.NotificationType
    read: boolean
    socketId: string
    senderId: number
    receiverId: number
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    type?: boolean
    read?: boolean
    socketId?: boolean
    senderId?: boolean
    receiverId?: boolean
    senderUser?: boolean | UsersDefaultArgs<ExtArgs>
    receiverUser?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type NotificationsSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    type?: boolean
    read?: boolean
    socketId?: boolean
    senderId?: boolean
    receiverId?: boolean
  }

  export type NotificationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    senderUser?: boolean | UsersDefaultArgs<ExtArgs>
    receiverUser?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $NotificationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Notifications"
    objects: {
      senderUser: Prisma.$UsersPayload<ExtArgs>
      receiverUser: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      title: string
      description: string | null
      icon: string | null
      type: $Enums.NotificationType
      read: boolean
      socketId: string
      senderId: number
      receiverId: number
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }


  type NotificationsGetPayload<S extends boolean | null | undefined | NotificationsDefaultArgs> = $Result.GetResult<Prisma.$NotificationsPayload, S>

  type NotificationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NotificationsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface NotificationsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notifications'], meta: { name: 'Notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {NotificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const notificationsWithCreatedAtOnly = await prisma.notifications.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends NotificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notifications.
     * @param {NotificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends NotificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsCreateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {NotificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends NotificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsDeleteArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {NotificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {NotificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationsUpsertArgs<ExtArgs>>
    ): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationsCountArgs>(
      args?: Subset<T, NotificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notifications model
   */
  readonly fields: NotificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    senderUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receiverUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notifications model
   */ 
  interface NotificationsFieldRefs {
    readonly createdAt: FieldRef<"Notifications", 'DateTime'>
    readonly updatedAt: FieldRef<"Notifications", 'DateTime'>
    readonly id: FieldRef<"Notifications", 'Int'>
    readonly title: FieldRef<"Notifications", 'String'>
    readonly description: FieldRef<"Notifications", 'String'>
    readonly icon: FieldRef<"Notifications", 'String'>
    readonly type: FieldRef<"Notifications", 'NotificationType'>
    readonly read: FieldRef<"Notifications", 'Boolean'>
    readonly socketId: FieldRef<"Notifications", 'String'>
    readonly senderId: FieldRef<"Notifications", 'Int'>
    readonly receiverId: FieldRef<"Notifications", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Notifications findUnique
   */
  export type NotificationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findUniqueOrThrow
   */
  export type NotificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications findFirst
   */
  export type NotificationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findFirstOrThrow
   */
  export type NotificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications findMany
   */
  export type NotificationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }


  /**
   * Notifications create
   */
  export type NotificationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Notifications.
     */
    data: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
  }


  /**
   * Notifications createMany
   */
  export type NotificationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationsCreateManyInput | NotificationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notifications update
   */
  export type NotificationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Notifications.
     */
    data: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
    /**
     * Choose, which Notifications to update.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications updateMany
   */
  export type NotificationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications upsert
   */
  export type NotificationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Notifications to update in case it exists.
     */
    where: NotificationsWhereUniqueInput
    /**
     * In case the Notifications found by the `where` argument doesn't exist, create a new Notifications with this data.
     */
    create: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
    /**
     * In case the Notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
  }


  /**
   * Notifications delete
   */
  export type NotificationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter which Notifications to delete.
     */
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications deleteMany
   */
  export type NotificationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationsWhereInput
  }


  /**
   * Notifications without action
   */
  export type NotificationsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationsInclude<ExtArgs> | null
  }



  /**
   * Model Chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ChatSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ChatMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    userId: number | null
    banUser: boolean | null
    muteUser: boolean | null
    gameInvite: string | null
  }

  export type ChatMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    userId: number | null
    banUser: boolean | null
    muteUser: boolean | null
    gameInvite: string | null
  }

  export type ChatCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    id: number
    userId: number
    banUser: number
    muteUser: number
    gameInvite: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ChatSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ChatMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    banUser?: true
    muteUser?: true
    gameInvite?: true
  }

  export type ChatMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    banUser?: true
    muteUser?: true
    gameInvite?: true
  }

  export type ChatCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    id?: true
    userId?: true
    banUser?: true
    muteUser?: true
    gameInvite?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithAggregationInput | ChatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    id: number
    userId: number
    banUser: boolean
    muteUser: boolean
    gameInvite: string | null
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    userId?: boolean
    banUser?: boolean
    muteUser?: boolean
    gameInvite?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    message?: boolean | Chat$messageArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    userId?: boolean
    banUser?: boolean
    muteUser?: boolean
    gameInvite?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    message?: boolean | Chat$messageArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChatPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Chat"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      message: Prisma.$MessagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      createdAt: Date
      updatedAt: Date
      id: number
      userId: number
      banUser: boolean
      muteUser: boolean
      gameInvite: string | null
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }


  type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = $Result.GetResult<Prisma.$ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const chatWithCreatedAtOnly = await prisma.chat.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatCreateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>
    ): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    message<T extends Chat$messageArgs<ExtArgs> = {}>(args?: Subset<T, Chat$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Chat model
   */ 
  interface ChatFieldRefs {
    readonly createdAt: FieldRef<"Chat", 'DateTime'>
    readonly updatedAt: FieldRef<"Chat", 'DateTime'>
    readonly id: FieldRef<"Chat", 'Int'>
    readonly userId: FieldRef<"Chat", 'Int'>
    readonly banUser: FieldRef<"Chat", 'Boolean'>
    readonly muteUser: FieldRef<"Chat", 'Boolean'>
    readonly gameInvite: FieldRef<"Chat", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Chat findUnique
   */
  export type ChatFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat findFirst
   */
  export type ChatFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat.message
   */
  export type Chat$messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Chat without action
   */
  export type ChatDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
  }



  /**
   * Model Messages
   */

  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesAvgAggregateOutputType = {
    id: number | null
    chatId: number | null
  }

  export type MessagesSumAggregateOutputType = {
    id: number | null
    chatId: number | null
  }

  export type MessagesMinAggregateOutputType = {
    createdAt: Date | null
    updateAt: Date | null
    id: number | null
    chatId: number | null
    text: string | null
  }

  export type MessagesMaxAggregateOutputType = {
    createdAt: Date | null
    updateAt: Date | null
    id: number | null
    chatId: number | null
    text: string | null
  }

  export type MessagesCountAggregateOutputType = {
    createdAt: number
    updateAt: number
    id: number
    chatId: number
    text: number
    _all: number
  }


  export type MessagesAvgAggregateInputType = {
    id?: true
    chatId?: true
  }

  export type MessagesSumAggregateInputType = {
    id?: true
    chatId?: true
  }

  export type MessagesMinAggregateInputType = {
    createdAt?: true
    updateAt?: true
    id?: true
    chatId?: true
    text?: true
  }

  export type MessagesMaxAggregateInputType = {
    createdAt?: true
    updateAt?: true
    id?: true
    chatId?: true
    text?: true
  }

  export type MessagesCountAggregateInputType = {
    createdAt?: true
    updateAt?: true
    id?: true
    chatId?: true
    text?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to aggregate.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type MessagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithAggregationInput | MessagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: MessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _avg?: MessagesAvgAggregateInputType
    _sum?: MessagesSumAggregateInputType
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }

  export type MessagesGroupByOutputType = {
    createdAt: Date
    updateAt: Date
    id: number
    chatId: number
    text: string
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends MessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type MessagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updateAt?: boolean
    id?: boolean
    chatId?: boolean
    text?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>

  export type MessagesSelectScalar = {
    createdAt?: boolean
    updateAt?: boolean
    id?: boolean
    chatId?: boolean
    text?: boolean
  }

  export type MessagesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }


  export type $MessagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Messages"
    objects: {
      chat: Prisma.$ChatPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      createdAt: Date
      updateAt: Date
      id: number
      chatId: number
      text: string
    }, ExtArgs["result"]["messages"]>
    composites: {}
  }


  type MessagesGetPayload<S extends boolean | null | undefined | MessagesDefaultArgs> = $Result.GetResult<Prisma.$MessagesPayload, S>

  type MessagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessagesFindManyArgs, 'select' | 'include'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface MessagesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Messages'], meta: { name: 'Messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {MessagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesFindUniqueArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Messages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindFirstArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const messagesWithCreatedAtOnly = await prisma.messages.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends MessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Messages.
     * @param {MessagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
    **/
    create<T extends MessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesCreateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessagesCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const messages = await prisma.messages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {MessagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
    **/
    delete<T extends MessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesDeleteArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Messages.
     * @param {MessagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {MessagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
    **/
    upsert<T extends MessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpsertArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessagesCountArgs>(
      args?: Subset<T, MessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessagesGroupByArgs['orderBy'] }
        : { orderBy?: MessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Messages model
   */
  readonly fields: MessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    chat<T extends ChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatDefaultArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Messages model
   */ 
  interface MessagesFieldRefs {
    readonly createdAt: FieldRef<"Messages", 'DateTime'>
    readonly updateAt: FieldRef<"Messages", 'DateTime'>
    readonly id: FieldRef<"Messages", 'Int'>
    readonly chatId: FieldRef<"Messages", 'Int'>
    readonly text: FieldRef<"Messages", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Messages findUnique
   */
  export type MessagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages findUniqueOrThrow
   */
  export type MessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages findFirst
   */
  export type MessagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages findFirstOrThrow
   */
  export type MessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages findMany
   */
  export type MessagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }


  /**
   * Messages create
   */
  export type MessagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Messages.
     */
    data: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
  }


  /**
   * Messages createMany
   */
  export type MessagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessagesCreateManyInput | MessagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Messages update
   */
  export type MessagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Messages.
     */
    data: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
    /**
     * Choose, which Messages to update.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages updateMany
   */
  export type MessagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages upsert
   */
  export type MessagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Messages to update in case it exists.
     */
    where: MessagesWhereUniqueInput
    /**
     * In case the Messages found by the `where` argument doesn't exist, create a new Messages with this data.
     */
    create: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
    /**
     * In case the Messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
  }


  /**
   * Messages delete
   */
  export type MessagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter which Messages to delete.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages deleteMany
   */
  export type MessagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages without action
   */
  export type MessagesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    avatar: 'avatar',
    hashRt: 'hashRt',
    twofa: 'twofa',
    twofaEmail: 'twofaEmail',
    twoEnabled: 'twoEnabled',
    isActive: 'isActive',
    userStatus: 'userStatus'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    title: 'title',
    description: 'description',
    icon: 'icon',
    type: 'type',
    read: 'read',
    socketId: 'socketId',
    senderId: 'senderId',
    receiverId: 'receiverId'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    userId: 'userId',
    banUser: 'banUser',
    muteUser: 'muteUser',
    gameInvite: 'gameInvite'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    createdAt: 'createdAt',
    updateAt: 'updateAt',
    id: 'id',
    chatId: 'chatId',
    text: 'text'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'userStatus'
   */
  export type EnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus'>
    


  /**
   * Reference to a field of type 'userStatus[]'
   */
  export type ListEnumuserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twofaEmail?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    isActive?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
    pendingFriendReq?: UsersListRelationFilter
    pendingFriendReqOf?: UsersListRelationFilter
    friends?: UsersListRelationFilter
    friendOf?: UsersListRelationFilter
    blocked?: UsersListRelationFilter
    blockedBy?: UsersListRelationFilter
    chat?: ChatListRelationFilter
    senNotification?: NotificationsListRelationFilter
    recNotification?: NotificationsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    hashRt?: SortOrderInput | SortOrder
    twofa?: SortOrderInput | SortOrder
    twofaEmail?: SortOrderInput | SortOrder
    twoEnabled?: SortOrder
    isActive?: SortOrder
    userStatus?: SortOrder
    pendingFriendReq?: UsersOrderByRelationAggregateInput
    pendingFriendReqOf?: UsersOrderByRelationAggregateInput
    friends?: UsersOrderByRelationAggregateInput
    friendOf?: UsersOrderByRelationAggregateInput
    blocked?: UsersOrderByRelationAggregateInput
    blockedBy?: UsersOrderByRelationAggregateInput
    chat?: ChatOrderByRelationAggregateInput
    senNotification?: NotificationsOrderByRelationAggregateInput
    recNotification?: NotificationsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    twofaEmail?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    isActive?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
    pendingFriendReq?: UsersListRelationFilter
    pendingFriendReqOf?: UsersListRelationFilter
    friends?: UsersListRelationFilter
    friendOf?: UsersListRelationFilter
    blocked?: UsersListRelationFilter
    blockedBy?: UsersListRelationFilter
    chat?: ChatListRelationFilter
    senNotification?: NotificationsListRelationFilter
    recNotification?: NotificationsListRelationFilter
  }, "id" | "username" | "email" | "twofaEmail">

  export type UsersOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    hashRt?: SortOrderInput | SortOrder
    twofa?: SortOrderInput | SortOrder
    twofaEmail?: SortOrderInput | SortOrder
    twoEnabled?: SortOrder
    isActive?: SortOrder
    userStatus?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    id?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringNullableWithAggregatesFilter<"Users"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Users"> | string | null
    hashRt?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twofa?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twofaEmail?: StringNullableWithAggregatesFilter<"Users"> | string | null
    twoEnabled?: BoolWithAggregatesFilter<"Users"> | boolean
    isActive?: BoolWithAggregatesFilter<"Users"> | boolean
    userStatus?: EnumuserStatusWithAggregatesFilter<"Users"> | $Enums.userStatus
  }

  export type NotificationsWhereInput = {
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    id?: IntFilter<"Notifications"> | number
    title?: StringFilter<"Notifications"> | string
    description?: StringNullableFilter<"Notifications"> | string | null
    icon?: StringNullableFilter<"Notifications"> | string | null
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    socketId?: StringFilter<"Notifications"> | string
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
    senderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    receiverUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type NotificationsOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    type?: SortOrder
    read?: SortOrder
    socketId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    senderUser?: UsersOrderByWithRelationInput
    receiverUser?: UsersOrderByWithRelationInput
  }

  export type NotificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    title?: StringFilter<"Notifications"> | string
    description?: StringNullableFilter<"Notifications"> | string | null
    icon?: StringNullableFilter<"Notifications"> | string | null
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    socketId?: StringFilter<"Notifications"> | string
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
    senderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    receiverUser?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type NotificationsOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    type?: SortOrder
    read?: SortOrder
    socketId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    _count?: NotificationsCountOrderByAggregateInput
    _avg?: NotificationsAvgOrderByAggregateInput
    _max?: NotificationsMaxOrderByAggregateInput
    _min?: NotificationsMinOrderByAggregateInput
    _sum?: NotificationsSumOrderByAggregateInput
  }

  export type NotificationsScalarWhereWithAggregatesInput = {
    AND?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    OR?: NotificationsScalarWhereWithAggregatesInput[]
    NOT?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
    id?: IntWithAggregatesFilter<"Notifications"> | number
    title?: StringWithAggregatesFilter<"Notifications"> | string
    description?: StringNullableWithAggregatesFilter<"Notifications"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Notifications"> | string | null
    type?: EnumNotificationTypeWithAggregatesFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolWithAggregatesFilter<"Notifications"> | boolean
    socketId?: StringWithAggregatesFilter<"Notifications"> | string
    senderId?: IntWithAggregatesFilter<"Notifications"> | number
    receiverId?: IntWithAggregatesFilter<"Notifications"> | number
  }

  export type ChatWhereInput = {
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    id?: IntFilter<"Chat"> | number
    userId?: IntFilter<"Chat"> | number
    banUser?: BoolFilter<"Chat"> | boolean
    muteUser?: BoolFilter<"Chat"> | boolean
    gameInvite?: StringNullableFilter<"Chat"> | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    message?: MessagesListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    banUser?: SortOrder
    muteUser?: SortOrder
    gameInvite?: SortOrderInput | SortOrder
    user?: UsersOrderByWithRelationInput
    message?: MessagesOrderByRelationAggregateInput
  }

  export type ChatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    userId?: IntFilter<"Chat"> | number
    banUser?: BoolFilter<"Chat"> | boolean
    muteUser?: BoolFilter<"Chat"> | boolean
    gameInvite?: StringNullableFilter<"Chat"> | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    message?: MessagesListRelationFilter
  }, "id">

  export type ChatOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    banUser?: SortOrder
    muteUser?: SortOrder
    gameInvite?: SortOrderInput | SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    OR?: ChatScalarWhereWithAggregatesInput[]
    NOT?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
    id?: IntWithAggregatesFilter<"Chat"> | number
    userId?: IntWithAggregatesFilter<"Chat"> | number
    banUser?: BoolWithAggregatesFilter<"Chat"> | boolean
    muteUser?: BoolWithAggregatesFilter<"Chat"> | boolean
    gameInvite?: StringNullableWithAggregatesFilter<"Chat"> | string | null
  }

  export type MessagesWhereInput = {
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    createdAt?: DateTimeFilter<"Messages"> | Date | string
    updateAt?: DateTimeFilter<"Messages"> | Date | string
    id?: IntFilter<"Messages"> | number
    chatId?: IntFilter<"Messages"> | number
    text?: StringFilter<"Messages"> | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type MessagesOrderByWithRelationInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    id?: SortOrder
    chatId?: SortOrder
    text?: SortOrder
    chat?: ChatOrderByWithRelationInput
  }

  export type MessagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    createdAt?: DateTimeFilter<"Messages"> | Date | string
    updateAt?: DateTimeFilter<"Messages"> | Date | string
    chatId?: IntFilter<"Messages"> | number
    text?: StringFilter<"Messages"> | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }, "id">

  export type MessagesOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    id?: SortOrder
    chatId?: SortOrder
    text?: SortOrder
    _count?: MessagesCountOrderByAggregateInput
    _avg?: MessagesAvgOrderByAggregateInput
    _max?: MessagesMaxOrderByAggregateInput
    _min?: MessagesMinOrderByAggregateInput
    _sum?: MessagesSumOrderByAggregateInput
  }

  export type MessagesScalarWhereWithAggregatesInput = {
    AND?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    OR?: MessagesScalarWhereWithAggregatesInput[]
    NOT?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Messages"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Messages"> | Date | string
    id?: IntWithAggregatesFilter<"Messages"> | number
    chatId?: IntWithAggregatesFilter<"Messages"> | number
    text?: StringWithAggregatesFilter<"Messages"> | string
  }

  export type UsersCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
  }

  export type UsersUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type NotificationsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderUser: UsersCreateNestedOneWithoutSenNotificationInput
    receiverUser: UsersCreateNestedOneWithoutRecNotificationInput
  }

  export type NotificationsUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderId: number
    receiverId: number
  }

  export type NotificationsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderUser?: UsersUpdateOneRequiredWithoutSenNotificationNestedInput
    receiverUser?: UsersUpdateOneRequiredWithoutRecNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderId: number
    receiverId: number
  }

  export type NotificationsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationsUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
    user: UsersCreateNestedOneWithoutChatInput
    message?: MessagesCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    userId: number
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
    message?: MessagesUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneRequiredWithoutChatNestedInput
    message?: MessagesUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
    message?: MessagesUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    userId: number
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
  }

  export type ChatUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessagesCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
    chat: ChatCreateNestedOneWithoutMessageInput
  }

  export type MessagesUncheckedCreateInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    id?: number
    chatId: number
    text: string
  }

  export type MessagesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessageNestedInput
  }

  export type MessagesUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesCreateManyInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    id?: number
    chatId: number
    text: string
  }

  export type MessagesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: NotificationsWhereInput
    some?: NotificationsWhereInput
    none?: NotificationsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    isActive?: SortOrder
    userStatus?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    isActive?: SortOrder
    userStatus?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    hashRt?: SortOrder
    twofa?: SortOrder
    twofaEmail?: SortOrder
    twoEnabled?: SortOrder
    isActive?: SortOrder
    userStatus?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type NotificationsCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    read?: SortOrder
    socketId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type NotificationsAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type NotificationsMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    read?: SortOrder
    socketId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type NotificationsMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    type?: SortOrder
    read?: SortOrder
    socketId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type NotificationsSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type MessagesListRelationFilter = {
    every?: MessagesWhereInput
    some?: MessagesWhereInput
    none?: MessagesWhereInput
  }

  export type MessagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    banUser?: SortOrder
    muteUser?: SortOrder
    gameInvite?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    banUser?: SortOrder
    muteUser?: SortOrder
    gameInvite?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    userId?: SortOrder
    banUser?: SortOrder
    muteUser?: SortOrder
    gameInvite?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type MessagesCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    id?: SortOrder
    chatId?: SortOrder
    text?: SortOrder
  }

  export type MessagesAvgOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
  }

  export type MessagesMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    id?: SortOrder
    chatId?: SortOrder
    text?: SortOrder
  }

  export type MessagesMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updateAt?: SortOrder
    id?: SortOrder
    chatId?: SortOrder
    text?: SortOrder
  }

  export type MessagesSumOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
  }

  export type UsersCreateNestedManyWithoutPendingFriendReqOfInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutPendingFriendReqInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutFriendOfInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutFriendsInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutBlockedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutReceiverUserInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutFriendOfInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutFriendsInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutBlockedByInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutBlockedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumuserStatusFieldUpdateOperationsInput = {
    set?: $Enums.userStatus
  }

  export type UsersUpdateManyWithoutPendingFriendReqOfNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput | UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutPendingFriendReqNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqInput | UsersUpdateManyWithWhereWithoutPendingFriendReqInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutFriendOfNestedInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendOfInput | UsersUpsertWithWhereUniqueWithoutFriendOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendOfInput | UsersUpdateWithWhereUniqueWithoutFriendOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendOfInput | UsersUpdateManyWithWhereWithoutFriendOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutFriendsNestedInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendsInput | UsersUpsertWithWhereUniqueWithoutFriendsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendsInput | UsersUpdateWithWhereUniqueWithoutFriendsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendsInput | UsersUpdateManyWithWhereWithoutFriendsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedByInput | UsersUpsertWithWhereUniqueWithoutBlockedByInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedByInput | UsersUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedByInput | UsersUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutBlockedNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedInput | UsersUpsertWithWhereUniqueWithoutBlockedInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedInput | UsersUpdateWithWhereUniqueWithoutBlockedInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedInput | UsersUpdateManyWithWhereWithoutBlockedInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutSenderUserInput | NotificationsUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutSenderUserInput | NotificationsUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutSenderUserInput | NotificationsUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutReceiverUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput | NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput | NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutReceiverUserInput | NotificationsUpdateManyWithWhereWithoutReceiverUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput> | UsersCreateWithoutPendingFriendReqOfInput[] | UsersUncheckedCreateWithoutPendingFriendReqOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqOfInput | UsersCreateOrConnectWithoutPendingFriendReqOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput | UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput = {
    create?: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput> | UsersCreateWithoutPendingFriendReqInput[] | UsersUncheckedCreateWithoutPendingFriendReqInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutPendingFriendReqInput | UsersCreateOrConnectWithoutPendingFriendReqInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput | UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput | UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutPendingFriendReqInput | UsersUpdateManyWithWhereWithoutPendingFriendReqInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutFriendOfNestedInput = {
    create?: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput> | UsersCreateWithoutFriendOfInput[] | UsersUncheckedCreateWithoutFriendOfInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendOfInput | UsersCreateOrConnectWithoutFriendOfInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendOfInput | UsersUpsertWithWhereUniqueWithoutFriendOfInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendOfInput | UsersUpdateWithWhereUniqueWithoutFriendOfInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendOfInput | UsersUpdateManyWithWhereWithoutFriendOfInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutFriendsNestedInput = {
    create?: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput> | UsersCreateWithoutFriendsInput[] | UsersUncheckedCreateWithoutFriendsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutFriendsInput | UsersCreateOrConnectWithoutFriendsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutFriendsInput | UsersUpsertWithWhereUniqueWithoutFriendsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutFriendsInput | UsersUpdateWithWhereUniqueWithoutFriendsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutFriendsInput | UsersUpdateManyWithWhereWithoutFriendsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutBlockedByNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput> | UsersCreateWithoutBlockedByInput[] | UsersUncheckedCreateWithoutBlockedByInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedByInput | UsersCreateOrConnectWithoutBlockedByInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedByInput | UsersUpsertWithWhereUniqueWithoutBlockedByInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedByInput | UsersUpdateWithWhereUniqueWithoutBlockedByInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedByInput | UsersUpdateManyWithWhereWithoutBlockedByInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutBlockedNestedInput = {
    create?: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput> | UsersCreateWithoutBlockedInput[] | UsersUncheckedCreateWithoutBlockedInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutBlockedInput | UsersCreateOrConnectWithoutBlockedInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutBlockedInput | UsersUpsertWithWhereUniqueWithoutBlockedInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutBlockedInput | UsersUpdateWithWhereUniqueWithoutBlockedInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutBlockedInput | UsersUpdateManyWithWhereWithoutBlockedInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput> | NotificationsCreateWithoutSenderUserInput[] | NotificationsUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutSenderUserInput | NotificationsCreateOrConnectWithoutSenderUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutSenderUserInput | NotificationsUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: NotificationsCreateManySenderUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutSenderUserInput | NotificationsUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutSenderUserInput | NotificationsUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput = {
    create?: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput> | NotificationsCreateWithoutReceiverUserInput[] | NotificationsUncheckedCreateWithoutReceiverUserInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutReceiverUserInput | NotificationsCreateOrConnectWithoutReceiverUserInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput | NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput[]
    createMany?: NotificationsCreateManyReceiverUserInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput | NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutReceiverUserInput | NotificationsUpdateManyWithWhereWithoutReceiverUserInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutSenNotificationInput = {
    create?: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSenNotificationInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutRecNotificationInput = {
    create?: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecNotificationInput
    connect?: UsersWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UsersUpdateOneRequiredWithoutSenNotificationNestedInput = {
    create?: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSenNotificationInput
    upsert?: UsersUpsertWithoutSenNotificationInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSenNotificationInput, UsersUpdateWithoutSenNotificationInput>, UsersUncheckedUpdateWithoutSenNotificationInput>
  }

  export type UsersUpdateOneRequiredWithoutRecNotificationNestedInput = {
    create?: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecNotificationInput
    upsert?: UsersUpsertWithoutRecNotificationInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRecNotificationInput, UsersUpdateWithoutRecNotificationInput>, UsersUncheckedUpdateWithoutRecNotificationInput>
  }

  export type UsersCreateNestedOneWithoutChatInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput
    connect?: UsersWhereUniqueInput
  }

  export type MessagesCreateNestedManyWithoutChatInput = {
    create?: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput> | MessagesCreateWithoutChatInput[] | MessagesUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatInput | MessagesCreateOrConnectWithoutChatInput[]
    createMany?: MessagesCreateManyChatInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type MessagesUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput> | MessagesCreateWithoutChatInput[] | MessagesUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatInput | MessagesCreateOrConnectWithoutChatInput[]
    createMany?: MessagesCreateManyChatInputEnvelope
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutChatNestedInput = {
    create?: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
    connectOrCreate?: UsersCreateOrConnectWithoutChatInput
    upsert?: UsersUpsertWithoutChatInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutChatInput, UsersUpdateWithoutChatInput>, UsersUncheckedUpdateWithoutChatInput>
  }

  export type MessagesUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput> | MessagesCreateWithoutChatInput[] | MessagesUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatInput | MessagesCreateOrConnectWithoutChatInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutChatInput | MessagesUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessagesCreateManyChatInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutChatInput | MessagesUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutChatInput | MessagesUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type MessagesUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput> | MessagesCreateWithoutChatInput[] | MessagesUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessagesCreateOrConnectWithoutChatInput | MessagesCreateOrConnectWithoutChatInput[]
    upsert?: MessagesUpsertWithWhereUniqueWithoutChatInput | MessagesUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessagesCreateManyChatInputEnvelope
    set?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    disconnect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    delete?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    connect?: MessagesWhereUniqueInput | MessagesWhereUniqueInput[]
    update?: MessagesUpdateWithWhereUniqueWithoutChatInput | MessagesUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessagesUpdateManyWithWhereWithoutChatInput | MessagesUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
  }

  export type ChatCreateNestedOneWithoutMessageInput = {
    create?: XOR<ChatCreateWithoutMessageInput, ChatUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessageInput
    connect?: ChatWhereUniqueInput
  }

  export type ChatUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<ChatCreateWithoutMessageInput, ChatUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessageInput
    upsert?: ChatUpsertWithoutMessageInput
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutMessageInput, ChatUpdateWithoutMessageInput>, ChatUncheckedUpdateWithoutMessageInput>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumuserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusFilter<$PrismaModel> | $Enums.userStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumuserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userStatus | EnumuserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.userStatus[] | ListEnumuserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumuserStatusWithAggregatesFilter<$PrismaModel> | $Enums.userStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserStatusFilter<$PrismaModel>
    _max?: NestedEnumuserStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type UsersCreateWithoutPendingFriendReqOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutPendingFriendReqOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput>
  }

  export type UsersCreateWithoutPendingFriendReqInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutPendingFriendReqInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput>
  }

  export type UsersCreateWithoutFriendOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutFriendOfInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersCreateWithoutFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersCreateWithoutBlockedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutBlockedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput>
  }

  export type UsersCreateWithoutBlockedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutBlockedInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput>
  }

  export type ChatCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
    message?: MessagesCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
    message?: MessagesUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutUserInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatCreateManyUserInputEnvelope = {
    data: ChatCreateManyUserInput | ChatCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutSenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    receiverUser: UsersCreateNestedOneWithoutRecNotificationInput
  }

  export type NotificationsUncheckedCreateWithoutSenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    receiverId: number
  }

  export type NotificationsCreateOrConnectWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput>
  }

  export type NotificationsCreateManySenderUserInputEnvelope = {
    data: NotificationsCreateManySenderUserInput | NotificationsCreateManySenderUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderUser: UsersCreateNestedOneWithoutSenNotificationInput
  }

  export type NotificationsUncheckedCreateWithoutReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderId: number
  }

  export type NotificationsCreateOrConnectWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput>
  }

  export type NotificationsCreateManyReceiverUserInputEnvelope = {
    data: NotificationsCreateManyReceiverUserInput | NotificationsCreateManyReceiverUserInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutPendingFriendReqOfInput, UsersUncheckedUpdateWithoutPendingFriendReqOfInput>
    create: XOR<UsersCreateWithoutPendingFriendReqOfInput, UsersUncheckedCreateWithoutPendingFriendReqOfInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutPendingFriendReqOfInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutPendingFriendReqOfInput, UsersUncheckedUpdateWithoutPendingFriendReqOfInput>
  }

  export type UsersUpdateManyWithWhereWithoutPendingFriendReqOfInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutPendingFriendReqOfInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    id?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringNullableFilter<"Users"> | string | null
    avatar?: StringNullableFilter<"Users"> | string | null
    hashRt?: StringNullableFilter<"Users"> | string | null
    twofa?: StringNullableFilter<"Users"> | string | null
    twofaEmail?: StringNullableFilter<"Users"> | string | null
    twoEnabled?: BoolFilter<"Users"> | boolean
    isActive?: BoolFilter<"Users"> | boolean
    userStatus?: EnumuserStatusFilter<"Users"> | $Enums.userStatus
  }

  export type UsersUpsertWithWhereUniqueWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutPendingFriendReqInput, UsersUncheckedUpdateWithoutPendingFriendReqInput>
    create: XOR<UsersCreateWithoutPendingFriendReqInput, UsersUncheckedCreateWithoutPendingFriendReqInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutPendingFriendReqInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutPendingFriendReqInput, UsersUncheckedUpdateWithoutPendingFriendReqInput>
  }

  export type UsersUpdateManyWithWhereWithoutPendingFriendReqInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutPendingFriendReqInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
    create: XOR<UsersCreateWithoutFriendOfInput, UsersUncheckedCreateWithoutFriendOfInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutFriendOfInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutFriendOfInput, UsersUncheckedUpdateWithoutFriendOfInput>
  }

  export type UsersUpdateManyWithWhereWithoutFriendOfInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutFriendOfInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
    create: XOR<UsersCreateWithoutFriendsInput, UsersUncheckedCreateWithoutFriendsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutFriendsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutFriendsInput, UsersUncheckedUpdateWithoutFriendsInput>
  }

  export type UsersUpdateManyWithWhereWithoutFriendsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutFriendsInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutBlockedByInput, UsersUncheckedUpdateWithoutBlockedByInput>
    create: XOR<UsersCreateWithoutBlockedByInput, UsersUncheckedCreateWithoutBlockedByInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutBlockedByInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutBlockedByInput, UsersUncheckedUpdateWithoutBlockedByInput>
  }

  export type UsersUpdateManyWithWhereWithoutBlockedByInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutBlockedByInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutBlockedInput, UsersUncheckedUpdateWithoutBlockedInput>
    create: XOR<UsersCreateWithoutBlockedInput, UsersUncheckedCreateWithoutBlockedInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutBlockedInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutBlockedInput, UsersUncheckedUpdateWithoutBlockedInput>
  }

  export type UsersUpdateManyWithWhereWithoutBlockedInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutBlockedInput>
  }

  export type ChatUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
  }

  export type ChatUpdateManyWithWhereWithoutUserInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatScalarWhereInput = {
    AND?: ChatScalarWhereInput | ChatScalarWhereInput[]
    OR?: ChatScalarWhereInput[]
    NOT?: ChatScalarWhereInput | ChatScalarWhereInput[]
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    id?: IntFilter<"Chat"> | number
    userId?: IntFilter<"Chat"> | number
    banUser?: BoolFilter<"Chat"> | boolean
    muteUser?: BoolFilter<"Chat"> | boolean
    gameInvite?: StringNullableFilter<"Chat"> | string | null
  }

  export type NotificationsUpsertWithWhereUniqueWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutSenderUserInput, NotificationsUncheckedUpdateWithoutSenderUserInput>
    create: XOR<NotificationsCreateWithoutSenderUserInput, NotificationsUncheckedCreateWithoutSenderUserInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutSenderUserInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutSenderUserInput, NotificationsUncheckedUpdateWithoutSenderUserInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutSenderUserInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutSenderUserInput>
  }

  export type NotificationsScalarWhereInput = {
    AND?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    OR?: NotificationsScalarWhereInput[]
    NOT?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    updatedAt?: DateTimeFilter<"Notifications"> | Date | string
    id?: IntFilter<"Notifications"> | number
    title?: StringFilter<"Notifications"> | string
    description?: StringNullableFilter<"Notifications"> | string | null
    icon?: StringNullableFilter<"Notifications"> | string | null
    type?: EnumNotificationTypeFilter<"Notifications"> | $Enums.NotificationType
    read?: BoolFilter<"Notifications"> | boolean
    socketId?: StringFilter<"Notifications"> | string
    senderId?: IntFilter<"Notifications"> | number
    receiverId?: IntFilter<"Notifications"> | number
  }

  export type NotificationsUpsertWithWhereUniqueWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutReceiverUserInput, NotificationsUncheckedUpdateWithoutReceiverUserInput>
    create: XOR<NotificationsCreateWithoutReceiverUserInput, NotificationsUncheckedCreateWithoutReceiverUserInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutReceiverUserInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutReceiverUserInput, NotificationsUncheckedUpdateWithoutReceiverUserInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutReceiverUserInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutReceiverUserInput>
  }

  export type UsersCreateWithoutSenNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutSenNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutSenNotificationInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
  }

  export type UsersCreateWithoutRecNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    chat?: ChatCreateNestedManyWithoutUserInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
  }

  export type UsersUncheckedCreateWithoutRecNotificationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UsersCreateOrConnectWithoutRecNotificationInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
  }

  export type UsersUpsertWithoutSenNotificationInput = {
    update: XOR<UsersUpdateWithoutSenNotificationInput, UsersUncheckedUpdateWithoutSenNotificationInput>
    create: XOR<UsersCreateWithoutSenNotificationInput, UsersUncheckedCreateWithoutSenNotificationInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSenNotificationInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSenNotificationInput, UsersUncheckedUpdateWithoutSenNotificationInput>
  }

  export type UsersUpdateWithoutSenNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSenNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUpsertWithoutRecNotificationInput = {
    update: XOR<UsersUpdateWithoutRecNotificationInput, UsersUncheckedUpdateWithoutRecNotificationInput>
    create: XOR<UsersCreateWithoutRecNotificationInput, UsersUncheckedCreateWithoutRecNotificationInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRecNotificationInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRecNotificationInput, UsersUncheckedUpdateWithoutRecNotificationInput>
  }

  export type UsersUpdateWithoutRecNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRecNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UsersCreateWithoutChatInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersCreateNestedManyWithoutFriendsInput
    blocked?: UsersCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersUncheckedCreateWithoutChatInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    username: string
    email: string
    password?: string | null
    avatar?: string | null
    hashRt?: string | null
    twofa?: string | null
    twofaEmail?: string | null
    twoEnabled?: boolean
    isActive?: boolean
    userStatus?: $Enums.userStatus
    pendingFriendReq?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqOfInput
    pendingFriendReqOf?: UsersUncheckedCreateNestedManyWithoutPendingFriendReqInput
    friends?: UsersUncheckedCreateNestedManyWithoutFriendOfInput
    friendOf?: UsersUncheckedCreateNestedManyWithoutFriendsInput
    blocked?: UsersUncheckedCreateNestedManyWithoutBlockedByInput
    blockedBy?: UsersUncheckedCreateNestedManyWithoutBlockedInput
    senNotification?: NotificationsUncheckedCreateNestedManyWithoutSenderUserInput
    recNotification?: NotificationsUncheckedCreateNestedManyWithoutReceiverUserInput
  }

  export type UsersCreateOrConnectWithoutChatInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
  }

  export type MessagesCreateWithoutChatInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    text: string
  }

  export type MessagesUncheckedCreateWithoutChatInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    id?: number
    text: string
  }

  export type MessagesCreateOrConnectWithoutChatInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput>
  }

  export type MessagesCreateManyChatInputEnvelope = {
    data: MessagesCreateManyChatInput | MessagesCreateManyChatInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutChatInput = {
    update: XOR<UsersUpdateWithoutChatInput, UsersUncheckedUpdateWithoutChatInput>
    create: XOR<UsersCreateWithoutChatInput, UsersUncheckedCreateWithoutChatInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutChatInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutChatInput, UsersUncheckedUpdateWithoutChatInput>
  }

  export type UsersUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type MessagesUpsertWithWhereUniqueWithoutChatInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutChatInput, MessagesUncheckedUpdateWithoutChatInput>
    create: XOR<MessagesCreateWithoutChatInput, MessagesUncheckedCreateWithoutChatInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutChatInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutChatInput, MessagesUncheckedUpdateWithoutChatInput>
  }

  export type MessagesUpdateManyWithWhereWithoutChatInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutChatInput>
  }

  export type MessagesScalarWhereInput = {
    AND?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    OR?: MessagesScalarWhereInput[]
    NOT?: MessagesScalarWhereInput | MessagesScalarWhereInput[]
    createdAt?: DateTimeFilter<"Messages"> | Date | string
    updateAt?: DateTimeFilter<"Messages"> | Date | string
    id?: IntFilter<"Messages"> | number
    chatId?: IntFilter<"Messages"> | number
    text?: StringFilter<"Messages"> | string
  }

  export type ChatCreateWithoutMessageInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
    user: UsersCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMessageInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    userId: number
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
  }

  export type ChatCreateOrConnectWithoutMessageInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessageInput, ChatUncheckedCreateWithoutMessageInput>
  }

  export type ChatUpsertWithoutMessageInput = {
    update: XOR<ChatUpdateWithoutMessageInput, ChatUncheckedUpdateWithoutMessageInput>
    create: XOR<ChatCreateWithoutMessageInput, ChatUncheckedCreateWithoutMessageInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutMessageInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutMessageInput, ChatUncheckedUpdateWithoutMessageInput>
  }

  export type ChatUpdateWithoutMessageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneRequiredWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatCreateManyUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    banUser: boolean
    muteUser: boolean
    gameInvite?: string | null
  }

  export type NotificationsCreateManySenderUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    receiverId: number
  }

  export type NotificationsCreateManyReceiverUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    title: string
    description?: string | null
    icon?: string | null
    type: $Enums.NotificationType
    read?: boolean
    socketId: string
    senderId: number
  }

  export type UsersUpdateWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUpdateWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutPendingFriendReqInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUpdateWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutFriendOfInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUpdateWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUpdateWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUpdateManyWithoutBlockedByNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blocked?: UsersUncheckedUpdateManyWithoutBlockedByNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutBlockedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type UsersUpdateWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUpdateManyWithoutFriendsNestedInput
    blockedBy?: UsersUpdateManyWithoutBlockedNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
    pendingFriendReq?: UsersUncheckedUpdateManyWithoutPendingFriendReqOfNestedInput
    pendingFriendReqOf?: UsersUncheckedUpdateManyWithoutPendingFriendReqNestedInput
    friends?: UsersUncheckedUpdateManyWithoutFriendOfNestedInput
    friendOf?: UsersUncheckedUpdateManyWithoutFriendsNestedInput
    blockedBy?: UsersUncheckedUpdateManyWithoutBlockedNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    senNotification?: NotificationsUncheckedUpdateManyWithoutSenderUserNestedInput
    recNotification?: NotificationsUncheckedUpdateManyWithoutReceiverUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutBlockedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    hashRt?: NullableStringFieldUpdateOperationsInput | string | null
    twofa?: NullableStringFieldUpdateOperationsInput | string | null
    twofaEmail?: NullableStringFieldUpdateOperationsInput | string | null
    twoEnabled?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userStatus?: EnumuserStatusFieldUpdateOperationsInput | $Enums.userStatus
  }

  export type ChatUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
    message?: MessagesUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
    message?: MessagesUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    banUser?: BoolFieldUpdateOperationsInput | boolean
    muteUser?: BoolFieldUpdateOperationsInput | boolean
    gameInvite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUpdateWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    receiverUser?: UsersUpdateOneRequiredWithoutRecNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsUncheckedUpdateManyWithoutSenderUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsUpdateWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderUser?: UsersUpdateOneRequiredWithoutSenNotificationNestedInput
  }

  export type NotificationsUncheckedUpdateWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationsUncheckedUpdateManyWithoutReceiverUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    socketId?: StringFieldUpdateOperationsInput | string
    senderId?: IntFieldUpdateOperationsInput | number
  }

  export type MessagesCreateManyChatInput = {
    createdAt?: Date | string
    updateAt?: Date | string
    id?: number
    text: string
  }

  export type MessagesUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type MessagesUncheckedUpdateManyWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationsDefaultArgs instead
     */
    export type NotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NotificationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatDefaultArgs instead
     */
    export type ChatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessagesDefaultArgs instead
     */
    export type MessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MessagesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}