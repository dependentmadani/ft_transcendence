// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  id                    Int             @id @default(autoincrement())
  username              String          @unique
  email                 String          @unique
  // socketId              Int
  password              String?
  avatar                String?
  hashRt                String?
  twofa                 String?
  twofaEmail            String?         @unique
  twoEnabled            Boolean         @default(false)
  pendingFriendReq      Users[]         @relation("PendingFriend")
  pendingFriendReqOf    Users[]         @relation("PendingFriend")
  friends               Users[]         @relation("friends")
  friendOf              Users[]         @relation("friends")
  blocked               Users[]         @relation("blockedUsers")
  blockedBy             Users[]         @relation("blockedUsers")
  chat                  Chat[]
  isActive              Boolean         @default(false)
  userStatus            userStatus      @default(OFFLINE)
  senNotification       Notifications[] @relation("senderNotification")
  recNotification       Notifications[] @relation("receiverNotification")
}

model Notifications {
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  id              Int         @id @default(autoincrement())
  title           String
  description     String?
  icon            String?
  type            NotificationType
  read            Boolean     @default(false)
  socketId        String
  senderUser      Users       @relation("senderNotification", fields: [senderId], references: [id])
  senderId        Int
  receiverUser    Users       @relation("receiverNotification", fields: [receiverId], references: [id])
  receiverId      Int
}

model Chat {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())
  user          Users     @relation(fields: [userId], references: [id]) //onDelete: Cascade "to check its usage"
  userId        Int
  banUser       Boolean
  muteUser      Boolean
  message       Messages[] @relation("textMessage")
  gameInvite    String?
}

model Messages {
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  id            Int       @id @default(autoincrement())
  chatId        Int
  text          String
  chat          Chat      @relation("textMessage", fields: [chatId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum RelationStatus {
  MUTED_UNTIL_TOMMORROW
  BLOCKED
  NORMAL
}

enum userStatus {
  ONLINE
  OFFLINE
  INGAME
}

enum  NotificationType {
  INFO
  MESSAGE
  FRIEND
  GAME
}