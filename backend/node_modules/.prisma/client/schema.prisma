// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String?
  avatar      String?
  hashRt      String?
  twofa       String?
  twofaEmail  String?   @unique
  twoEnabled  Boolean   @default(false)
  friend      Users[]   @relation("friends")
  block       Users[]   @relation("friends")
  // chat        Chat[]
  usrChatId Chat[]
  senId     Chat[] @relation("sencontact")
  recId     Chat[] @relation("reccontact")
  MessageSenId     Message[] @relation("Messagesencontact")
  MessageRecId     Message[] @relation("Messagereccontact")
  rooms       RoomUsers[]
  // roomId      Int?
  // adminId       Room[] @relation()
}

// model Chat {
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   id            Int       @id @default(autoincrement())
//   user          Users     @relation(fields: [userId], references: [id]) //onDelete: Cascade "to check its usage"
//   userId        Int
//   banUser       Boolean
//   muteUser      Boolean
//   blocked_user  Boolean
//   gameInvite    String?
// }

model Chat {
  chatId   Int @id @default(autoincrement())
  senderId    Users @relation("sencontact", fields: [senId], references: [id])
  senId       Int
  receiverId  Users @relation("reccontact", fields: [recId], references: [id])
  recId       Int
  msgChatId     Message[]
  userChatId  Users @relation(fields: [usrChatId], references: [id])
  usrChatId       Int
}

model Message {
  messageId Int @id @default(autoincrement())
  textContent String
  createdAt   DateTime @default(now())
  senderId    Users @relation("Messagesencontact", fields: [MessageSenId], references: [id])
  MessageSenId       Int
  receiverId  Users @relation("Messagereccontact", fields: [MessageRecId], references: [id])
  MessageRecId       Int
  messageChatId  Chat @relation(fields: [msgChatId], references: [chatId])
  msgChatId       Int
}

model Room {
  id   Int @id @default(autoincrement())
  roomName    String
  roomAvatar  String
  roomUsers   RoomUsers[]
  // admin     Users @relation("roomId", fields: [adminId], references: [id])
  // adminId   Int
  // roomUsers   Users[] @relation(references: [id])
  // kickedUsers Users[] @relation(references: [id])
  // mutedUser   Users[] @relation(references: [id])
  // banedUsers  Users[] @relation(references: [id])

  // senderId    Users @relation("senroom", fields: [senId], references: [id])
  // senId       Int
  // receiverId  Users @relation("recroom", fields: [recId], references: [id])
  // recId       Int
  // msgChatId     Message[]
}

model RoomUsers {
  userId  Int
  roomId  Int
  user    Users @relation(fields: [userId], references: [id])
  room    Room @relation(fields: [roomId], references: [id])
  role    Role @default(USER)

  @@id([userId, roomId])
}

enum Role {
  ADMIN
  USER
  KICKED
  MUTED
  BANNED
}