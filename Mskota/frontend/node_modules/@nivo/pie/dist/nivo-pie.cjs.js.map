{"version":3,"file":"nivo-pie.cjs.js","sources":["../src/PieLegends.tsx","../src/props.ts","../src/PieTooltip.tsx","../src/hooks.ts","../src/Arcs.tsx","../src/Pie.tsx","../src/PieCanvas.tsx","../src/ResponsivePie.tsx","../src/ResponsivePieCanvas.tsx"],"sourcesContent":["import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["PieLegends","_ref","width","height","legends","data","toggleSerie","_jsx","_Fragment","children","map","legend","i","_legend$data","jsx","BoxLegendSvg","_extends","containerWidth","containerHeight","undefined","defaultProps","id","value","sortByValue","innerRadius","padAngle","cornerRadius","layers","startAngle","endAngle","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","theme","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","fill","isInteractive","animate","motionConfig","transitionMode","tooltip","datum","BasicTooltip","formattedValue","enableChip","color","role","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","useNormalizedData","_ref$id","_ref$value","valueFormat","_ref$colors","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","useMemo","_datum$label","datumId","datumValue","normalizedDatum","label","hidden","usePieArcs","_ref2","outerRadius","activeId","hiddenIds","pie","innerPie","d3Pie","d","degreesToRadians","sortValues","hiddenData","filter","item","includes","dataWithArc","arc","angle","Math","abs","index","thickness","angleDeg","radiansToDegrees","legendData","usePieFromBox","_ref4","_ref4$innerRadius","innerRadiusRatio","_ref4$startAngle","_ref4$endAngle","_ref4$padAngle","_ref4$sortByValue","_ref4$cornerRadius","_ref4$fit","_ref4$activeInnerRadi","_ref4$activeOuterRadi","_useState3","useState","setActiveId","_useState4","setHiddenIds","computedProps","boundingBox","radius","min","centerX","centerY","_computeArcBoundingBo","computeArcBoundingBox","points","box","_objectWithoutPropertiesLoose","_excluded","ratio","adjustedBox","x","y","debug","pieArcs","useCallback","state","indexOf","concat","arcGenerator","useArcGenerator","usePieLayerContext","_ref5","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerPie","_ref$sortByValue","_ref$layers","_ref$startAngle","_ref$endAngle","_ref$padAngle","_ref$fit","_ref$innerRadius","_ref$cornerRadius","_ref$activeInnerRadiu","_ref$activeOuterRadiu","partialMargin","margin","_ref$borderWidth","_ref$borderColor","_ref$enableArcLabels","_ref$arcLabel","_ref$arcLabelsSkipAng","_ref$arcLabelsTextCol","_ref$arcLabelsRadiusO","arcLabelsComponent","_ref$enableArcLinkLab","_ref$arcLinkLabel","_ref$arcLinkLabelsSki","_ref$arcLinkLabelsOff","_ref$arcLinkLabelsDia","_ref$arcLinkLabelsStr","_ref$arcLinkLabelsThi","_ref$arcLinkLabelsTex","_ref$arcLinkLabelsTex2","_ref$arcLinkLabelsCol","arcLinkLabelComponent","_ref$defs","_ref$fill","_ref$isInteractive","_ref$tooltip","_ref$transitionMode","_ref$legends","_ref$role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","_usePieFromBox","boundDefs","bindDefs","layerById","arcLinkLabels","arcs","arcLabels","ArcLinkLabelsLayer","skipAngle","offset","diagonalLength","straightLength","strokeWidth","textOffset","textColor","linkColor","component","ArcLabelsLayer","radiusOffset","length","layerContext","SvgWrapper","layer","Fragment","Pie","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","InnerPieCanvas","_ref$pixelRatio","canvasEl","useRef","useTheme","getBorderColor","useInheritedColor","useArcLabels","useArcLinkLabels","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","left","top","context","forEach","beginPath","strokeStyle","lineWidth","stroke","drawCanvasArcLinkLabels","drawCanvasArcLabels","restore","renderLegendToCanvas","getArcFromMouse","_getRelativeCursor","getRelativeCursor","hoveredArc","findArcUnderCursor","find","handleMouseHover","ref","style","cursor","PieCanvas","props","ResponsiveWrapper","_ref3","_ref3$startAngle","_ref3$endAngle","_ref3$padAngle","_ref3$sortByValue","_ref3$cornerRadius","_ref3$activeInnerRadi","_ref3$activeOuterRadi","_useState","_useState2"],"mappings":"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"}